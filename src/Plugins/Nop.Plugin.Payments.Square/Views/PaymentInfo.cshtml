@model Nop.Plugin.Payments.Square.Models.PaymentInfoModel
@{
    Layout = "";
}
test
<!--
      These div elements are the placeholder elements that are replaced by the
      SqPaymentForm's iframes.
    -->
<label>Card Number</label>
<div id="sq-card-number"></div>
<label>CVV</label>
<div id="sq-cvv"></div>
<label>Expiration Date</label>
<div id="sq-expiration-date"></div>
<label>Postal Code</label>
<div id="sq-postal-code"></div>

<!--
  After the SqPaymentForm generates a card nonce, *this* form POSTs the generated
  card nonce to your application's server.

  You should replace the action attribute of the form with the path of
  the URL you want to POST the nonce to (for example, "/process-card")
-->
<form id="nonce-form" novalidate action="REPLACE_ME" method="post">

    <!--
      Whenever a nonce is generated, it's assigned as the value of this hidden
      input field.
    -->
    <input type="hidden" id="card-nonce" name="nonce">

    <!--
      Clicking this Submit button kicks off the process to generate a card nonce
      from the buyer's card information.
    -->
    <input type="submit" onclick="requestCardNonce(event)">
</form>
<script type="text/javascript">
    $(function () {
        $.getScript("https://js.squareup.com/v2/paymentform", function (data, status, xhr) {
            EmbedPaymentFormCallback();
        });
    });

    function EmbedPaymentFormCallback() {
        debugger;
        $(".payment-info-next-step-button").removeAttr("onClick");
        var appId = 'sandbox-sq0idp-fbZ1PpCfJMGaXkwuI7p81g';

        var sqPaymentForm = new SqPaymentForm({
            // Replace this value with your application's ID (available from the merchant dashboard).
            // If you're just testing things out, replace this with your _Sandbox_ application ID,
            // which is also available there.
            applicationId: appId,
            inputClass: 'sq-input',
            cardNumber: {
                elementId: 'sq-card-number',
                placeholder: "0000 0000 0000 0000"
            },
            cvv: {
                elementId: 'sq-cvv',
                placeholder: 'CVV'
            },
            expirationDate: {
                elementId: 'sq-expiration-date',
                placeholder: 'MM/YY'
            },
            postalCode: {
                elementId: 'sq-postal-code',
                placeholder: 'Postal Code'
            },
            inputStyles: [
              // Because this object provides no value for mediaMaxWidth or mediaMinWidth,
              // these styles apply for screens of all sizes, unless overridden by another
              // input style below.
              {
                  fontSize: '14px',
                  padding: '3px'
              },
              // These styles are applied to inputs ONLY when the screen width is 400px
              // or smaller. Note that because it doesn't specify a value for padding,
              // the padding value in the previous object is preserved.
              {
                  mediaMaxWidth: '400px',
                  fontSize: '18px',
              }
            ],
            callbacks: {
                cardNonceResponseReceived: function (errors, nonce, cardData) {
                    if (errors) {
                        var errorDiv = document.getElementById('errors');
                        errorDiv.innerHTML = "";
                        errors.forEach(function (error) {
                            var p = document.createElement('p');
                            p.innerHTML = error.message;
                            errorDiv.appendChild(p);
                        });
                    } else {
                        // This alert is for debugging purposes only.
                        alert('Nonce received! ' + nonce + ' ' + JSON.stringify(cardData));
                        // Assign the value of the nonce to a hidden form element
                        var nonceField = document.getElementById('cardNonce');
                        nonceField.value = nonce;


                    }
                },
                unsupportedBrowserDetected: function () {
                    // Alert the buyer that their browser is not supported
                }
            }
        });
        sqPaymentForm.build();
        function submitButtonClick(event) {
            event.preventDefault();
            sqPaymentForm.requestCardNonce();
        }
        function SendNonce() {
            PageMethods.Charge(document.getElementById('cardNonce').value, OnSuccess);
        }
        function Clear() {
            // Submit the form
            document.getElementById('form').submit();
        }
        function OnSuccess(response, userContext, methodName) {
            alert(response);
        }
    }
</script>