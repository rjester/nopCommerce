@model Nop.Plugin.Payments.Square.Models.PaymentInfoModel
@{
    Layout = "";
}
@if (Model.UseSandbox)
{
    <h3>*** Sandbox Mode ***</h3>
}
<div class="form-group">
    <label>@T("Plugins.Payments.Square.Fields.CardNumber")</label>
    <div id="sq-card-number"></div>
</div>
<label>@T("Plugins.Payments.Square.Fields.CVV")</label>
<div id="sq-cvv"></div>
<label>@T("Plugins.Payments.Square.Fields.ExpirationDate")</label>
<div id="sq-expiration-date"></div>
<label>@T("Plugins.Payments.Square.Fields.PostalCode")</label>
<div id="sq-postal-code"></div>
<input type="hidden" style="display:none;" id="nonce" name="nonce">
<style type="text/css">
    .sq-input {
        border: 1px solid rgb(223, 223, 223);
        outline-offset: -2px;
        padding-top: 2px;
        margin-top: 8px;
        margin-bottom: 5px;
        height: 25px;
    }
    .payment-error {
        color: red;
    }
</style>
<script type="text/javascript">
    var paymentInfoObject = {};
    var sqPaymentForm = {};

    $(function () {
        $.getScript("https://js.squareup.com/v2/paymentform", function (data, status, xhr) {
            EmbedPaymentFormCallback();
        });
    });

    function EmbedPaymentFormCallback() {
        $(".payment-info-next-step-button").removeAttr("onClick");
        var appId = '@Model.ApplicationId';

        sqPaymentForm = new SqPaymentForm({
            applicationId: appId,
            inputClass: 'sq-input',
            cardNumber: {
                elementId: 'sq-card-number',
                placeholder: "0000 0000 0000 0000"
            },
            cvv: {
                elementId: 'sq-cvv',
                placeholder: 'CVV'
            },
            expirationDate: {
                elementId: 'sq-expiration-date',
                placeholder: 'MM/YY'
            },
            postalCode: {
                elementId: 'sq-postal-code',
                placeholder: 'Postal Code'
            },
            inputStyles: [
              {
                  fontSize: '14px',
                  padding: '3px'
              },
              {
                  mediaMaxWidth: '400px',
                  fontSize: '18px',
              }
            ],
            callbacks: {
                cardNonceResponseReceived: function (errors, nonce, cardData) {
                    cardNonceCallback(errors, nonce, cardData);
                },
                unsupportedBrowserDetected: function () {
                    // Alert the buyer that their browser is not supported
                }
            }
        });
        sqPaymentForm.build();

        function cardNonceCallback(errors, nonce, cardData) {
            if (errors) {
                $('.payment-error').text('');
                var errorMessages = [];
                errors.forEach(function (error) {
                    paymentInfoObject.errorMessages.push(error.message);
                });
                paymentInfoObject.submitFormCallback(paymentInfoObject.errorMessages);
            } else {
                var nonceToken = nonce;
                $("#nonce").val(nonceToken);
                paymentInfoObject.submitFormCallback(paymentInfoObject.errorMessages);
            }
        }
    }


    function externalValidation(errorMessages, submitFormCallback) {
        paymentInfoObject.errorMessages = errorMessages;
        paymentInfoObject.submitFormCallback = submitFormCallback;

        // Some other payment method has been selected, so the element won't be in the mark-up.
        if ($("#nonce").length == 0) {
            paymentInfoObject.submitFormCallback(paymentInfoObject.errorMessages);
            return false;
        }

        sqPaymentForm.requestCardNonce();

        return false;
    }
</script>
<div class="payment-error"></div>