<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Square.Connect</name>
    </assembly>
    <members>
        <member name="T:Square.Connect.Api.ICheckoutApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.ICheckoutApi.CreateCheckout(System.String,System.String,Square.Connect.Model.CreateCheckoutRequest)">
             <summary>
             CreateCheckout
             </summary>
             <remarks>
             Creates a [Checkout](#type-checkout) response that links a `checkoutId` and `checkout_page_url` that customers can be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the business location to associate the checkout with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>CreateCheckoutResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICheckoutApi.CreateCheckoutWithHttpInfo(System.String,System.String,Square.Connect.Model.CreateCheckoutRequest)">
             <summary>
             CreateCheckout
             </summary>
             <remarks>
             Creates a [Checkout](#type-checkout) response that links a `checkoutId` and `checkout_page_url` that customers can be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the business location to associate the checkout with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of CreateCheckoutResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICheckoutApi.CreateCheckoutAsync(System.String,System.String,Square.Connect.Model.CreateCheckoutRequest)">
             <summary>
             CreateCheckout
             </summary>
             <remarks>
             Creates a [Checkout](#type-checkout) response that links a `checkoutId` and `checkout_page_url` that customers can be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the business location to associate the checkout with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of CreateCheckoutResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICheckoutApi.CreateCheckoutAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.CreateCheckoutRequest)">
             <summary>
             CreateCheckout
             </summary>
             <remarks>
             Creates a [Checkout](#type-checkout) response that links a `checkoutId` and `checkout_page_url` that customers can be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the business location to associate the checkout with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (CreateCheckoutResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.CheckoutApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.CheckoutApi.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.CheckoutApi" /> class.
             </summary>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.CheckoutApi.#ctor(Square.Connect.Client.Configuration)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.CheckoutApi" /> class
             using Configuration object
             </summary>
             <param name="configuration">An instance of Configuration</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.CheckoutApi.GetBasePath">
             <summary>
             Gets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="M:Square.Connect.Api.CheckoutApi.SetBasePath(System.String)">
             <summary>
             Sets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="P:Square.Connect.Api.CheckoutApi.Configuration">
             <summary>
             Gets or sets the configuration object
             </summary>
             <value>An instance of the Configuration</value>
            </member>
        <member name="P:Square.Connect.Api.CheckoutApi.ExceptionFactory">
             <summary>
             Provides a factory method hook for the creation of exceptions.
             </summary>
            </member>
        <member name="M:Square.Connect.Api.CheckoutApi.DefaultHeader">
             <summary>
             Gets the default header.
             </summary>
             <returns>Dictionary of HTTP header</returns>
            </member>
        <member name="M:Square.Connect.Api.CheckoutApi.AddDefaultHeader(System.String,System.String)">
             <summary>
             Add default header.
             </summary>
             <param name="key">Header field name.</param>
             <param name="value">Header field value.</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.CheckoutApi.CreateCheckout(System.String,System.String,Square.Connect.Model.CreateCheckoutRequest)">
             <summary>
             CreateCheckout Creates a [Checkout](#type-checkout) response that links a `checkoutId` and `checkout_page_url` that customers can be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the business location to associate the checkout with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>CreateCheckoutResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CheckoutApi.CreateCheckoutWithHttpInfo(System.String,System.String,Square.Connect.Model.CreateCheckoutRequest)">
             <summary>
             CreateCheckout Creates a [Checkout](#type-checkout) response that links a `checkoutId` and `checkout_page_url` that customers can be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the business location to associate the checkout with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of CreateCheckoutResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CheckoutApi.CreateCheckoutAsync(System.String,System.String,Square.Connect.Model.CreateCheckoutRequest)">
             <summary>
             CreateCheckout Creates a [Checkout](#type-checkout) response that links a `checkoutId` and `checkout_page_url` that customers can be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the business location to associate the checkout with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of CreateCheckoutResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CheckoutApi.CreateCheckoutAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.CreateCheckoutRequest)">
             <summary>
             CreateCheckout Creates a [Checkout](#type-checkout) response that links a `checkoutId` and `checkout_page_url` that customers can be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the business location to associate the checkout with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (CreateCheckoutResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.ICustomerApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.CreateCustomer(System.String,Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             CreateCustomer
             </summary>
             <remarks>
             Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - `given_name` - `family_name` - `company_name` - `email_address` - `phone_number`  This endpoint does not accept an idempotency key. If you accidentally create a duplicate customer, you can delete it with the [DeleteCustomer](#endpoint-deletecustomer) endpoint.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>CreateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.CreateCustomerWithHttpInfo(System.String,Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             CreateCustomer
             </summary>
             <remarks>
             Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - `given_name` - `family_name` - `company_name` - `email_address` - `phone_number`  This endpoint does not accept an idempotency key. If you accidentally create a duplicate customer, you can delete it with the [DeleteCustomer](#endpoint-deletecustomer) endpoint.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of CreateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.DeleteCustomer(System.String,System.String)">
             <summary>
             DeleteCustomer
             </summary>
             <remarks>
             Deletes a customer from a business, along with any linked cards on file.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to delete.</param>
             <returns>DeleteCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.DeleteCustomerWithHttpInfo(System.String,System.String)">
             <summary>
             DeleteCustomer
             </summary>
             <remarks>
             Deletes a customer from a business, along with any linked cards on file.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to delete.</param>
             <returns>ApiResponse of DeleteCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.ListCustomers(System.String,System.String)">
             <summary>
             ListCustomers
             </summary>
             <remarks>
             Lists a business's customers.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ListCustomersResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.ListCustomersWithHttpInfo(System.String,System.String)">
             <summary>
             ListCustomers
             </summary>
             <remarks>
             Lists a business's customers.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ApiResponse of ListCustomersResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.RetrieveCustomer(System.String,System.String)">
             <summary>
             RetrieveCustomer
             </summary>
             <remarks>
             Returns details for a single customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to retrieve.</param>
             <returns>RetrieveCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.RetrieveCustomerWithHttpInfo(System.String,System.String)">
             <summary>
             RetrieveCustomer
             </summary>
             <remarks>
             Returns details for a single customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to retrieve.</param>
             <returns>ApiResponse of RetrieveCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.UpdateCustomer(System.String,System.String,Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             UpdateCustomer
             </summary>
             <remarks>
             Updates the details of an existing customer.  You cannot edit a customer's cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to update.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>UpdateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.UpdateCustomerWithHttpInfo(System.String,System.String,Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             UpdateCustomer
             </summary>
             <remarks>
             Updates the details of an existing customer.  You cannot edit a customer's cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to update.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of UpdateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.CreateCustomerAsync(System.String,Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             CreateCustomer
             </summary>
             <remarks>
             Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - `given_name` - `family_name` - `company_name` - `email_address` - `phone_number`  This endpoint does not accept an idempotency key. If you accidentally create a duplicate customer, you can delete it with the [DeleteCustomer](#endpoint-deletecustomer) endpoint.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of CreateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.CreateCustomerAsyncWithHttpInfo(System.String,Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             CreateCustomer
             </summary>
             <remarks>
             Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - `given_name` - `family_name` - `company_name` - `email_address` - `phone_number`  This endpoint does not accept an idempotency key. If you accidentally create a duplicate customer, you can delete it with the [DeleteCustomer](#endpoint-deletecustomer) endpoint.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (CreateCustomerResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.DeleteCustomerAsync(System.String,System.String)">
             <summary>
             DeleteCustomer
             </summary>
             <remarks>
             Deletes a customer from a business, along with any linked cards on file.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to delete.</param>
             <returns>Task of DeleteCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.DeleteCustomerAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             DeleteCustomer
             </summary>
             <remarks>
             Deletes a customer from a business, along with any linked cards on file.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to delete.</param>
             <returns>Task of ApiResponse (DeleteCustomerResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.ListCustomersAsync(System.String,System.String)">
             <summary>
             ListCustomers
             </summary>
             <remarks>
             Lists a business's customers.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ListCustomersResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.ListCustomersAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             ListCustomers
             </summary>
             <remarks>
             Lists a business's customers.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ApiResponse (ListCustomersResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.RetrieveCustomerAsync(System.String,System.String)">
             <summary>
             RetrieveCustomer
             </summary>
             <remarks>
             Returns details for a single customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to retrieve.</param>
             <returns>Task of RetrieveCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.RetrieveCustomerAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             RetrieveCustomer
             </summary>
             <remarks>
             Returns details for a single customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to retrieve.</param>
             <returns>Task of ApiResponse (RetrieveCustomerResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.UpdateCustomerAsync(System.String,System.String,Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             UpdateCustomer
             </summary>
             <remarks>
             Updates the details of an existing customer.  You cannot edit a customer's cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to update.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of UpdateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerApi.UpdateCustomerAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             UpdateCustomer
             </summary>
             <remarks>
             Updates the details of an existing customer.  You cannot edit a customer's cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to update.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (UpdateCustomerResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.CustomerApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.CustomerApi" /> class.
             </summary>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.#ctor(Square.Connect.Client.Configuration)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.CustomerApi" /> class
             using Configuration object
             </summary>
             <param name="configuration">An instance of Configuration</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.GetBasePath">
             <summary>
             Gets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.SetBasePath(System.String)">
             <summary>
             Sets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="P:Square.Connect.Api.CustomerApi.Configuration">
             <summary>
             Gets or sets the configuration object
             </summary>
             <value>An instance of the Configuration</value>
            </member>
        <member name="P:Square.Connect.Api.CustomerApi.ExceptionFactory">
             <summary>
             Provides a factory method hook for the creation of exceptions.
             </summary>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.DefaultHeader">
             <summary>
             Gets the default header.
             </summary>
             <returns>Dictionary of HTTP header</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.AddDefaultHeader(System.String,System.String)">
             <summary>
             Add default header.
             </summary>
             <param name="key">Header field name.</param>
             <param name="value">Header field value.</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.CreateCustomer(System.String,Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             CreateCustomer Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - `given_name` - `family_name` - `company_name` - `email_address` - `phone_number`  This endpoint does not accept an idempotency key. If you accidentally create a duplicate customer, you can delete it with the [DeleteCustomer](#endpoint-deletecustomer) endpoint.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>CreateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.CreateCustomerWithHttpInfo(System.String,Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             CreateCustomer Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - `given_name` - `family_name` - `company_name` - `email_address` - `phone_number`  This endpoint does not accept an idempotency key. If you accidentally create a duplicate customer, you can delete it with the [DeleteCustomer](#endpoint-deletecustomer) endpoint.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of CreateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.CreateCustomerAsync(System.String,Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             CreateCustomer Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - `given_name` - `family_name` - `company_name` - `email_address` - `phone_number`  This endpoint does not accept an idempotency key. If you accidentally create a duplicate customer, you can delete it with the [DeleteCustomer](#endpoint-deletecustomer) endpoint.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of CreateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.CreateCustomerAsyncWithHttpInfo(System.String,Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             CreateCustomer Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - `given_name` - `family_name` - `company_name` - `email_address` - `phone_number`  This endpoint does not accept an idempotency key. If you accidentally create a duplicate customer, you can delete it with the [DeleteCustomer](#endpoint-deletecustomer) endpoint.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (CreateCustomerResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.DeleteCustomer(System.String,System.String)">
             <summary>
             DeleteCustomer Deletes a customer from a business, along with any linked cards on file.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to delete.</param>
             <returns>DeleteCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.DeleteCustomerWithHttpInfo(System.String,System.String)">
             <summary>
             DeleteCustomer Deletes a customer from a business, along with any linked cards on file.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to delete.</param>
             <returns>ApiResponse of DeleteCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.DeleteCustomerAsync(System.String,System.String)">
             <summary>
             DeleteCustomer Deletes a customer from a business, along with any linked cards on file.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to delete.</param>
             <returns>Task of DeleteCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.DeleteCustomerAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             DeleteCustomer Deletes a customer from a business, along with any linked cards on file.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to delete.</param>
             <returns>Task of ApiResponse (DeleteCustomerResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.ListCustomers(System.String,System.String)">
             <summary>
             ListCustomers Lists a business's customers.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ListCustomersResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.ListCustomersWithHttpInfo(System.String,System.String)">
             <summary>
             ListCustomers Lists a business's customers.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ApiResponse of ListCustomersResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.ListCustomersAsync(System.String,System.String)">
             <summary>
             ListCustomers Lists a business's customers.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ListCustomersResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.ListCustomersAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             ListCustomers Lists a business's customers.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ApiResponse (ListCustomersResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.RetrieveCustomer(System.String,System.String)">
             <summary>
             RetrieveCustomer Returns details for a single customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to retrieve.</param>
             <returns>RetrieveCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.RetrieveCustomerWithHttpInfo(System.String,System.String)">
             <summary>
             RetrieveCustomer Returns details for a single customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to retrieve.</param>
             <returns>ApiResponse of RetrieveCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.RetrieveCustomerAsync(System.String,System.String)">
             <summary>
             RetrieveCustomer Returns details for a single customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to retrieve.</param>
             <returns>Task of RetrieveCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.RetrieveCustomerAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             RetrieveCustomer Returns details for a single customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to retrieve.</param>
             <returns>Task of ApiResponse (RetrieveCustomerResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.UpdateCustomer(System.String,System.String,Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             UpdateCustomer Updates the details of an existing customer.  You cannot edit a customer's cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to update.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>UpdateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.UpdateCustomerWithHttpInfo(System.String,System.String,Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             UpdateCustomer Updates the details of an existing customer.  You cannot edit a customer's cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to update.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of UpdateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.UpdateCustomerAsync(System.String,System.String,Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             UpdateCustomer Updates the details of an existing customer.  You cannot edit a customer's cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to update.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of UpdateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerApi.UpdateCustomerAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             UpdateCustomer Updates the details of an existing customer.  You cannot edit a customer's cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to update.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (UpdateCustomerResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.ICustomerCardApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.ICustomerCardApi.CreateCustomerCard(System.String,System.String,Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             CreateCustomerCard
             </summary>
             <remarks>
             Adds a card on file to an existing customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to link the card on file to.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>CreateCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerCardApi.CreateCustomerCardWithHttpInfo(System.String,System.String,Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             CreateCustomerCard
             </summary>
             <remarks>
             Adds a card on file to an existing customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to link the card on file to.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of CreateCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerCardApi.DeleteCustomerCard(System.String,System.String,System.String)">
             <summary>
             DeleteCustomerCard
             </summary>
             <remarks>
             Removes a card on file from a customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer that the card on file belongs to.</param>
             <param name="cardId">The ID of the card on file to delete.</param>
             <returns>DeleteCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerCardApi.DeleteCustomerCardWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             DeleteCustomerCard
             </summary>
             <remarks>
             Removes a card on file from a customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer that the card on file belongs to.</param>
             <param name="cardId">The ID of the card on file to delete.</param>
             <returns>ApiResponse of DeleteCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerCardApi.CreateCustomerCardAsync(System.String,System.String,Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             CreateCustomerCard
             </summary>
             <remarks>
             Adds a card on file to an existing customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to link the card on file to.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of CreateCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerCardApi.CreateCustomerCardAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             CreateCustomerCard
             </summary>
             <remarks>
             Adds a card on file to an existing customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to link the card on file to.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (CreateCustomerCardResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerCardApi.DeleteCustomerCardAsync(System.String,System.String,System.String)">
             <summary>
             DeleteCustomerCard
             </summary>
             <remarks>
             Removes a card on file from a customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer that the card on file belongs to.</param>
             <param name="cardId">The ID of the card on file to delete.</param>
             <returns>Task of DeleteCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomerCardApi.DeleteCustomerCardAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             DeleteCustomerCard
             </summary>
             <remarks>
             Removes a card on file from a customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer that the card on file belongs to.</param>
             <param name="cardId">The ID of the card on file to delete.</param>
             <returns>Task of ApiResponse (DeleteCustomerCardResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.CustomerCardApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.CustomerCardApi" /> class.
             </summary>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.#ctor(Square.Connect.Client.Configuration)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.CustomerCardApi" /> class
             using Configuration object
             </summary>
             <param name="configuration">An instance of Configuration</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.GetBasePath">
             <summary>
             Gets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.SetBasePath(System.String)">
             <summary>
             Sets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="P:Square.Connect.Api.CustomerCardApi.Configuration">
             <summary>
             Gets or sets the configuration object
             </summary>
             <value>An instance of the Configuration</value>
            </member>
        <member name="P:Square.Connect.Api.CustomerCardApi.ExceptionFactory">
             <summary>
             Provides a factory method hook for the creation of exceptions.
             </summary>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.DefaultHeader">
             <summary>
             Gets the default header.
             </summary>
             <returns>Dictionary of HTTP header</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.AddDefaultHeader(System.String,System.String)">
             <summary>
             Add default header.
             </summary>
             <param name="key">Header field name.</param>
             <param name="value">Header field value.</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.CreateCustomerCard(System.String,System.String,Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             CreateCustomerCard Adds a card on file to an existing customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to link the card on file to.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>CreateCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.CreateCustomerCardWithHttpInfo(System.String,System.String,Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             CreateCustomerCard Adds a card on file to an existing customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to link the card on file to.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of CreateCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.CreateCustomerCardAsync(System.String,System.String,Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             CreateCustomerCard Adds a card on file to an existing customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to link the card on file to.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of CreateCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.CreateCustomerCardAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             CreateCustomerCard Adds a card on file to an existing customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer to link the card on file to.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (CreateCustomerCardResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.DeleteCustomerCard(System.String,System.String,System.String)">
             <summary>
             DeleteCustomerCard Removes a card on file from a customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer that the card on file belongs to.</param>
             <param name="cardId">The ID of the card on file to delete.</param>
             <returns>DeleteCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.DeleteCustomerCardWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             DeleteCustomerCard Removes a card on file from a customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer that the card on file belongs to.</param>
             <param name="cardId">The ID of the card on file to delete.</param>
             <returns>ApiResponse of DeleteCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.DeleteCustomerCardAsync(System.String,System.String,System.String)">
             <summary>
             DeleteCustomerCard Removes a card on file from a customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer that the card on file belongs to.</param>
             <param name="cardId">The ID of the card on file to delete.</param>
             <returns>Task of DeleteCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomerCardApi.DeleteCustomerCardAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             DeleteCustomerCard Removes a card on file from a customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="customerId">The ID of the customer that the card on file belongs to.</param>
             <param name="cardId">The ID of the card on file to delete.</param>
             <returns>Task of ApiResponse (DeleteCustomerCardResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.ILocationApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.ILocationApi.ListLocations(System.String)">
             <summary>
             ListLocations
             </summary>
             <remarks>
             Provides the details for all of a business's locations.  Most other Connect API endpoints have a required `location_id` path parameter. The `id` field of the [`Location`](#type-location) objects returned by this endpoint correspond to that `location_id` parameter.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <returns>ListLocationsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ILocationApi.ListLocationsWithHttpInfo(System.String)">
             <summary>
             ListLocations
             </summary>
             <remarks>
             Provides the details for all of a business's locations.  Most other Connect API endpoints have a required `location_id` path parameter. The `id` field of the [`Location`](#type-location) objects returned by this endpoint correspond to that `location_id` parameter.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <returns>ApiResponse of ListLocationsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ILocationApi.ListLocationsAsync(System.String)">
             <summary>
             ListLocations
             </summary>
             <remarks>
             Provides the details for all of a business's locations.  Most other Connect API endpoints have a required `location_id` path parameter. The `id` field of the [`Location`](#type-location) objects returned by this endpoint correspond to that `location_id` parameter.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <returns>Task of ListLocationsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ILocationApi.ListLocationsAsyncWithHttpInfo(System.String)">
             <summary>
             ListLocations
             </summary>
             <remarks>
             Provides the details for all of a business's locations.  Most other Connect API endpoints have a required `location_id` path parameter. The `id` field of the [`Location`](#type-location) objects returned by this endpoint correspond to that `location_id` parameter.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <returns>Task of ApiResponse (ListLocationsResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.LocationApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.LocationApi.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.LocationApi" /> class.
             </summary>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.LocationApi.#ctor(Square.Connect.Client.Configuration)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.LocationApi" /> class
             using Configuration object
             </summary>
             <param name="configuration">An instance of Configuration</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.LocationApi.GetBasePath">
             <summary>
             Gets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="M:Square.Connect.Api.LocationApi.SetBasePath(System.String)">
             <summary>
             Sets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="P:Square.Connect.Api.LocationApi.Configuration">
             <summary>
             Gets or sets the configuration object
             </summary>
             <value>An instance of the Configuration</value>
            </member>
        <member name="P:Square.Connect.Api.LocationApi.ExceptionFactory">
             <summary>
             Provides a factory method hook for the creation of exceptions.
             </summary>
            </member>
        <member name="M:Square.Connect.Api.LocationApi.DefaultHeader">
             <summary>
             Gets the default header.
             </summary>
             <returns>Dictionary of HTTP header</returns>
            </member>
        <member name="M:Square.Connect.Api.LocationApi.AddDefaultHeader(System.String,System.String)">
             <summary>
             Add default header.
             </summary>
             <param name="key">Header field name.</param>
             <param name="value">Header field value.</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.LocationApi.ListLocations(System.String)">
             <summary>
             ListLocations Provides the details for all of a business's locations.  Most other Connect API endpoints have a required `location_id` path parameter. The `id` field of the [`Location`](#type-location) objects returned by this endpoint correspond to that `location_id` parameter.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <returns>ListLocationsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.LocationApi.ListLocationsWithHttpInfo(System.String)">
             <summary>
             ListLocations Provides the details for all of a business's locations.  Most other Connect API endpoints have a required `location_id` path parameter. The `id` field of the [`Location`](#type-location) objects returned by this endpoint correspond to that `location_id` parameter.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <returns>ApiResponse of ListLocationsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.LocationApi.ListLocationsAsync(System.String)">
             <summary>
             ListLocations Provides the details for all of a business's locations.  Most other Connect API endpoints have a required `location_id` path parameter. The `id` field of the [`Location`](#type-location) objects returned by this endpoint correspond to that `location_id` parameter.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <returns>Task of ListLocationsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.LocationApi.ListLocationsAsyncWithHttpInfo(System.String)">
             <summary>
             ListLocations Provides the details for all of a business's locations.  Most other Connect API endpoints have a required `location_id` path parameter. The `id` field of the [`Location`](#type-location) objects returned by this endpoint correspond to that `location_id` parameter.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <returns>Task of ApiResponse (ListLocationsResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.IRefundApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.IRefundApi.CreateRefund(System.String,System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
             <summary>
             CreateRefund
             </summary>
             <remarks>
             Initiates a refund for a previously charged tender.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the original transaction's associated location.</param>
             <param name="transactionId">The ID of the original transaction that includes the tender to refund.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>CreateRefundResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IRefundApi.CreateRefundWithHttpInfo(System.String,System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
             <summary>
             CreateRefund
             </summary>
             <remarks>
             Initiates a refund for a previously charged tender.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the original transaction's associated location.</param>
             <param name="transactionId">The ID of the original transaction that includes the tender to refund.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of CreateRefundResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IRefundApi.ListRefunds(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListRefunds
             </summary>
             <remarks>
             Lists refunds for one of a business's locations.  Refunds with a `status` of `PENDING` are not currently included in this endpoint's response.  Max results per [page](#paginatingresults): 50
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ListRefundsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IRefundApi.ListRefundsWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListRefunds
             </summary>
             <remarks>
             Lists refunds for one of a business's locations.  Refunds with a `status` of `PENDING` are not currently included in this endpoint's response.  Max results per [page](#paginatingresults): 50
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ApiResponse of ListRefundsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IRefundApi.CreateRefundAsync(System.String,System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
             <summary>
             CreateRefund
             </summary>
             <remarks>
             Initiates a refund for a previously charged tender.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the original transaction's associated location.</param>
             <param name="transactionId">The ID of the original transaction that includes the tender to refund.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of CreateRefundResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IRefundApi.CreateRefundAsyncWithHttpInfo(System.String,System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
             <summary>
             CreateRefund
             </summary>
             <remarks>
             Initiates a refund for a previously charged tender.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the original transaction's associated location.</param>
             <param name="transactionId">The ID of the original transaction that includes the tender to refund.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (CreateRefundResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.IRefundApi.ListRefundsAsync(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListRefunds
             </summary>
             <remarks>
             Lists refunds for one of a business's locations.  Refunds with a `status` of `PENDING` are not currently included in this endpoint's response.  Max results per [page](#paginatingresults): 50
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ListRefundsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IRefundApi.ListRefundsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListRefunds
             </summary>
             <remarks>
             Lists refunds for one of a business's locations.  Refunds with a `status` of `PENDING` are not currently included in this endpoint's response.  Max results per [page](#paginatingresults): 50
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ApiResponse (ListRefundsResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.RefundApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.RefundApi" /> class.
             </summary>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.#ctor(Square.Connect.Client.Configuration)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.RefundApi" /> class
             using Configuration object
             </summary>
             <param name="configuration">An instance of Configuration</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.GetBasePath">
             <summary>
             Gets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.SetBasePath(System.String)">
             <summary>
             Sets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="P:Square.Connect.Api.RefundApi.Configuration">
             <summary>
             Gets or sets the configuration object
             </summary>
             <value>An instance of the Configuration</value>
            </member>
        <member name="P:Square.Connect.Api.RefundApi.ExceptionFactory">
             <summary>
             Provides a factory method hook for the creation of exceptions.
             </summary>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.DefaultHeader">
             <summary>
             Gets the default header.
             </summary>
             <returns>Dictionary of HTTP header</returns>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.AddDefaultHeader(System.String,System.String)">
             <summary>
             Add default header.
             </summary>
             <param name="key">Header field name.</param>
             <param name="value">Header field value.</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.CreateRefund(System.String,System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
             <summary>
             CreateRefund Initiates a refund for a previously charged tender.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the original transaction's associated location.</param>
             <param name="transactionId">The ID of the original transaction that includes the tender to refund.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>CreateRefundResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.CreateRefundWithHttpInfo(System.String,System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
             <summary>
             CreateRefund Initiates a refund for a previously charged tender.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the original transaction's associated location.</param>
             <param name="transactionId">The ID of the original transaction that includes the tender to refund.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of CreateRefundResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.CreateRefundAsync(System.String,System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
             <summary>
             CreateRefund Initiates a refund for a previously charged tender.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the original transaction's associated location.</param>
             <param name="transactionId">The ID of the original transaction that includes the tender to refund.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of CreateRefundResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.CreateRefundAsyncWithHttpInfo(System.String,System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
             <summary>
             CreateRefund Initiates a refund for a previously charged tender.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the original transaction's associated location.</param>
             <param name="transactionId">The ID of the original transaction that includes the tender to refund.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (CreateRefundResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.ListRefunds(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListRefunds Lists refunds for one of a business's locations.  Refunds with a `status` of `PENDING` are not currently included in this endpoint's response.  Max results per [page](#paginatingresults): 50
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ListRefundsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.ListRefundsWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListRefunds Lists refunds for one of a business's locations.  Refunds with a `status` of `PENDING` are not currently included in this endpoint's response.  Max results per [page](#paginatingresults): 50
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ApiResponse of ListRefundsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.ListRefundsAsync(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListRefunds Lists refunds for one of a business's locations.  Refunds with a `status` of `PENDING` are not currently included in this endpoint's response.  Max results per [page](#paginatingresults): 50
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ListRefundsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.RefundApi.ListRefundsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListRefunds Lists refunds for one of a business's locations.  Refunds with a `status` of `PENDING` are not currently included in this endpoint's response.  Max results per [page](#paginatingresults): 50
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ApiResponse (ListRefundsResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.ITransactionApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.CaptureTransaction(System.String,System.String,System.String)">
             <summary>
             CaptureTransaction
             </summary>
             <remarks>
             Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>CaptureTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.CaptureTransactionWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             CaptureTransaction
             </summary>
             <remarks>
             Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>ApiResponse of CaptureTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.Charge(System.String,System.String,Square.Connect.Model.ChargeRequest)">
             <summary>
             Charge
             </summary>
             <remarks>
             Charges a card represented by a card nonce or a customer's card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer's card on file)  In order for an e-commerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square's processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to associate the created transaction with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ChargeResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.ChargeWithHttpInfo(System.String,System.String,Square.Connect.Model.ChargeRequest)">
             <summary>
             Charge
             </summary>
             <remarks>
             Charges a card represented by a card nonce or a customer's card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer's card on file)  In order for an e-commerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square's processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to associate the created transaction with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of ChargeResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.ListTransactions(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListTransactions
             </summary>
             <remarks>
             Lists transactions for a particular location.  Max results per [page](#paginatingresults): 50
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list transactions for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ListTransactionsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.ListTransactionsWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListTransactions
             </summary>
             <remarks>
             Lists transactions for a particular location.  Max results per [page](#paginatingresults): 50
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list transactions for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ApiResponse of ListTransactionsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.RetrieveTransaction(System.String,System.String,System.String)">
             <summary>
             RetrieveTransaction
             </summary>
             <remarks>
             Retrieves details for a single transaction.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the transaction's associated location.</param>
             <param name="transactionId">The ID of the transaction to retrieve.</param>
             <returns>RetrieveTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.RetrieveTransactionWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             RetrieveTransaction
             </summary>
             <remarks>
             Retrieves details for a single transaction.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the transaction's associated location.</param>
             <param name="transactionId">The ID of the transaction to retrieve.</param>
             <returns>ApiResponse of RetrieveTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.VoidTransaction(System.String,System.String,System.String)">
             <summary>
             VoidTransaction
             </summary>
             <remarks>
             Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>VoidTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.VoidTransactionWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             VoidTransaction
             </summary>
             <remarks>
             Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>ApiResponse of VoidTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.CaptureTransactionAsync(System.String,System.String,System.String)">
             <summary>
             CaptureTransaction
             </summary>
             <remarks>
             Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of CaptureTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.CaptureTransactionAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             CaptureTransaction
             </summary>
             <remarks>
             Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of ApiResponse (CaptureTransactionResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.ChargeAsync(System.String,System.String,Square.Connect.Model.ChargeRequest)">
             <summary>
             Charge
             </summary>
             <remarks>
             Charges a card represented by a card nonce or a customer's card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer's card on file)  In order for an e-commerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square's processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to associate the created transaction with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ChargeResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.ChargeAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.ChargeRequest)">
             <summary>
             Charge
             </summary>
             <remarks>
             Charges a card represented by a card nonce or a customer's card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer's card on file)  In order for an e-commerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square's processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to associate the created transaction with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (ChargeResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.ListTransactionsAsync(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListTransactions
             </summary>
             <remarks>
             Lists transactions for a particular location.  Max results per [page](#paginatingresults): 50
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list transactions for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ListTransactionsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.ListTransactionsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListTransactions
             </summary>
             <remarks>
             Lists transactions for a particular location.  Max results per [page](#paginatingresults): 50
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list transactions for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ApiResponse (ListTransactionsResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.RetrieveTransactionAsync(System.String,System.String,System.String)">
             <summary>
             RetrieveTransaction
             </summary>
             <remarks>
             Retrieves details for a single transaction.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the transaction's associated location.</param>
             <param name="transactionId">The ID of the transaction to retrieve.</param>
             <returns>Task of RetrieveTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.RetrieveTransactionAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             RetrieveTransaction
             </summary>
             <remarks>
             Retrieves details for a single transaction.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the transaction's associated location.</param>
             <param name="transactionId">The ID of the transaction to retrieve.</param>
             <returns>Task of ApiResponse (RetrieveTransactionResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.VoidTransactionAsync(System.String,System.String,System.String)">
             <summary>
             VoidTransaction
             </summary>
             <remarks>
             Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of VoidTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionApi.VoidTransactionAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             VoidTransaction
             </summary>
             <remarks>
             Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of ApiResponse (VoidTransactionResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.TransactionApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.TransactionApi" /> class.
             </summary>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.#ctor(Square.Connect.Client.Configuration)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.TransactionApi" /> class
             using Configuration object
             </summary>
             <param name="configuration">An instance of Configuration</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.GetBasePath">
             <summary>
             Gets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.SetBasePath(System.String)">
             <summary>
             Sets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="P:Square.Connect.Api.TransactionApi.Configuration">
             <summary>
             Gets or sets the configuration object
             </summary>
             <value>An instance of the Configuration</value>
            </member>
        <member name="P:Square.Connect.Api.TransactionApi.ExceptionFactory">
             <summary>
             Provides a factory method hook for the creation of exceptions.
             </summary>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.DefaultHeader">
             <summary>
             Gets the default header.
             </summary>
             <returns>Dictionary of HTTP header</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.AddDefaultHeader(System.String,System.String)">
             <summary>
             Add default header.
             </summary>
             <param name="key">Header field name.</param>
             <param name="value">Header field value.</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.CaptureTransaction(System.String,System.String,System.String)">
             <summary>
             CaptureTransaction Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>CaptureTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.CaptureTransactionWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             CaptureTransaction Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>ApiResponse of CaptureTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.CaptureTransactionAsync(System.String,System.String,System.String)">
             <summary>
             CaptureTransaction Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of CaptureTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.CaptureTransactionAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             CaptureTransaction Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of ApiResponse (CaptureTransactionResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.Charge(System.String,System.String,Square.Connect.Model.ChargeRequest)">
             <summary>
             Charge Charges a card represented by a card nonce or a customer's card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer's card on file)  In order for an e-commerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square's processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to associate the created transaction with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ChargeResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.ChargeWithHttpInfo(System.String,System.String,Square.Connect.Model.ChargeRequest)">
             <summary>
             Charge Charges a card represented by a card nonce or a customer's card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer's card on file)  In order for an e-commerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square's processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to associate the created transaction with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of ChargeResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.ChargeAsync(System.String,System.String,Square.Connect.Model.ChargeRequest)">
             <summary>
             Charge Charges a card represented by a card nonce or a customer's card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer's card on file)  In order for an e-commerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square's processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to associate the created transaction with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ChargeResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.ChargeAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.ChargeRequest)">
             <summary>
             Charge Charges a card represented by a card nonce or a customer's card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer's card on file)  In order for an e-commerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square's processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to associate the created transaction with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (ChargeResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.ListTransactions(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListTransactions Lists transactions for a particular location.  Max results per [page](#paginatingresults): 50
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list transactions for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ListTransactionsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.ListTransactionsWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListTransactions Lists transactions for a particular location.  Max results per [page](#paginatingresults): 50
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list transactions for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ApiResponse of ListTransactionsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.ListTransactionsAsync(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListTransactions Lists transactions for a particular location.  Max results per [page](#paginatingresults): 50
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list transactions for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ListTransactionsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.ListTransactionsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListTransactions Lists transactions for a particular location.  Max results per [page](#paginatingresults): 50
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the location to list transactions for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ApiResponse (ListTransactionsResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.RetrieveTransaction(System.String,System.String,System.String)">
             <summary>
             RetrieveTransaction Retrieves details for a single transaction.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the transaction's associated location.</param>
             <param name="transactionId">The ID of the transaction to retrieve.</param>
             <returns>RetrieveTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.RetrieveTransactionWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             RetrieveTransaction Retrieves details for a single transaction.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the transaction's associated location.</param>
             <param name="transactionId">The ID of the transaction to retrieve.</param>
             <returns>ApiResponse of RetrieveTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.RetrieveTransactionAsync(System.String,System.String,System.String)">
             <summary>
             RetrieveTransaction Retrieves details for a single transaction.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the transaction's associated location.</param>
             <param name="transactionId">The ID of the transaction to retrieve.</param>
             <returns>Task of RetrieveTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.RetrieveTransactionAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             RetrieveTransaction Retrieves details for a single transaction.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId">The ID of the transaction's associated location.</param>
             <param name="transactionId">The ID of the transaction to retrieve.</param>
             <returns>Task of ApiResponse (RetrieveTransactionResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.VoidTransaction(System.String,System.String,System.String)">
             <summary>
             VoidTransaction Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>VoidTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.VoidTransactionWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             VoidTransaction Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>ApiResponse of VoidTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.VoidTransactionAsync(System.String,System.String,System.String)">
             <summary>
             VoidTransaction Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of VoidTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionApi.VoidTransactionAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             VoidTransaction Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="authorization">The value to provide in the Authorization header of your request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`.</param>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of ApiResponse (VoidTransactionResponse)</returns>
            </member>
        <member name="T:Square.Connect.Client.ApiClient">
             <summary>
             API client is mainly responsible for making the HTTP call to the API backend.
             </summary>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.InterceptRequest(RestSharp.IRestRequest)">
             <summary>
             Allows for extending request processing for <see cref="T:Square.Connect.Client.ApiClient" /> generated code.
             </summary>
             <param name="request">The RestSharp request object</param>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.InterceptResponse(RestSharp.IRestRequest,RestSharp.IRestResponse)">
             <summary>
             Allows for extending response processing for <see cref="T:Square.Connect.Client.ApiClient" /> generated code.
             </summary>
             <param name="request">The RestSharp request object</param>
             <param name="response">The RestSharp response object</param>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiClient" /> class
             with default configuration and base path (https://connect.squareup.com).
             </summary>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.#ctor(Square.Connect.Client.Configuration)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiClient" /> class
             with default base path (https://connect.squareup.com).
             </summary>
             <param name="config">An instance of Configuration.</param>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiClient" /> class
             with default configuration.
             </summary>
             <param name="basePath">The base path.</param>
            </member>
        <member name="F:Square.Connect.Client.ApiClient.Default">
             <summary>
             Gets or sets the default API client for making HTTP calls.
             </summary>
             <value>The default API client.</value>
            </member>
        <member name="P:Square.Connect.Client.ApiClient.Configuration">
             <summary>
             Gets or sets the Configuration.
             </summary>
             <value>An instance of the Configuration.</value>
            </member>
        <member name="P:Square.Connect.Client.ApiClient.RestClient">
             <summary>
             Gets or sets the RestClient.
             </summary>
             <value>An instance of the RestClient</value>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.CallApi(System.String,RestSharp.Method,System.Collections.Generic.Dictionary{System.String,System.String},System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,RestSharp.FileParameter},System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
             <summary>
             Makes the HTTP request (Sync).
             </summary>
             <param name="path">URL path.</param>
             <param name="method">HTTP method.</param>
             <param name="queryParams">Query parameters.</param>
             <param name="postBody">HTTP body (POST request).</param>
             <param name="headerParams">Header parameters.</param>
             <param name="formParams">Form parameters.</param>
             <param name="fileParams">File parameters.</param>
             <param name="pathParams">Path parameters.</param>
             <param name="contentType">Content Type of the request</param>
             <returns>Object</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.CallApiAsync(System.String,RestSharp.Method,System.Collections.Generic.Dictionary{System.String,System.String},System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,RestSharp.FileParameter},System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
             <summary>
             Makes the asynchronous HTTP request.
             </summary>
             <param name="path">URL path.</param>
             <param name="method">HTTP method.</param>
             <param name="queryParams">Query parameters.</param>
             <param name="postBody">HTTP body (POST request).</param>
             <param name="headerParams">Header parameters.</param>
             <param name="formParams">Form parameters.</param>
             <param name="fileParams">File parameters.</param>
             <param name="pathParams">Path parameters.</param>
             <param name="contentType">Content type.</param>
             <returns>The Task instance.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.EscapeString(System.String)">
             <summary>
             Escape string (url-encoded).
             </summary>
             <param name="str">String to be escaped.</param>
             <returns>Escaped string.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.ParameterToFile(System.String,System.IO.Stream)">
             <summary>
             Create FileParameter based on Stream.
             </summary>
             <param name="name">Parameter name.</param>
             <param name="stream">Input stream.</param>
             <returns>FileParameter.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.ParameterToString(System.Object)">
             <summary>
             If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
             If parameter is a list, join the list with ",".
             Otherwise just return the string.
             </summary>
             <param name="obj">The parameter (header, path, query, form).</param>
             <returns>Formatted string.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.Deserialize(RestSharp.IRestResponse,System.Type)">
             <summary>
             Deserialize the JSON string into a proper object.
             </summary>
             <param name="response">The HTTP response.</param>
             <param name="type">Object type.</param>
             <returns>Object representation of the JSON string.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.Serialize(System.Object)">
             <summary>
             Serialize an input (model) into JSON string
             </summary>
             <param name="obj">Object.</param>
             <returns>JSON string.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.SelectHeaderContentType(System.String[])">
             <summary>
             Select the Content-Type header's value from the given content-type array:
             if JSON exists in the given array, use it;
             otherwise use the first one defined in 'consumes'
             </summary>
             <param name="contentTypes">The Content-Type array to select from.</param>
             <returns>The Content-Type header to use.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.SelectHeaderAccept(System.String[])">
             <summary>
             Select the Accept header's value from the given accepts array:
             if JSON exists in the given array, use it;
             otherwise use all of them (joining into a string)
             </summary>
             <param name="accepts">The accepts array to select from.</param>
             <returns>The Accept header to use.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.Base64Encode(System.String)">
             <summary>
             Encode string in base64 format.
             </summary>
             <param name="text">String to be encoded.</param>
             <returns>Encoded string.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.ConvertType(System.dynamic,System.Type)">
             <summary>
             Dynamically cast the object into target type.
             Ref: http://stackoverflow.com/questions/4925718/c-dynamic-runtime-cast
             </summary>
             <param name="source">Object to be casted</param>
             <param name="dest">Target type</param>
             <returns>Casted object</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.ReadAsBytes(System.IO.Stream)">
             <summary>
             Convert stream to byte array
             Credit/Ref: http://stackoverflow.com/a/221941/677735
             </summary>
             <param name="input">Input stream to be converted</param>
             <returns>Byte array</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.UrlEncode(System.String)">
             <summary>
             URL encode a string
             Credit/Ref: https://github.com/restsharp/RestSharp/blob/master/RestSharp/Extensions/StringExtensions.cs#L50
             </summary>
             <param name="input">String to be URL encoded</param>
             <returns>Byte array</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.SanitizeFilename(System.String)">
             <summary>
             Sanitize filename by removing the path
             </summary>
             <param name="filename">Filename</param>
             <returns>Filename</returns>
            </member>
        <member name="T:Square.Connect.Client.ApiException">
             <summary>
             API Exception
             </summary>
            </member>
        <member name="P:Square.Connect.Client.ApiException.ErrorCode">
             <summary>
             Gets or sets the error code (HTTP status code)
             </summary>
             <value>The error code (HTTP status code).</value>
            </member>
        <member name="P:Square.Connect.Client.ApiException.ErrorContent">
             <summary>
             Gets or sets the error content (body json object)
             </summary>
             <value>The error content (Http response body).</value>
            </member>
        <member name="M:Square.Connect.Client.ApiException.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiException" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Client.ApiException.#ctor(System.Int32,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiException" /> class.
             </summary>
             <param name="errorCode">HTTP status code.</param>
             <param name="message">Error message.</param>
            </member>
        <member name="M:Square.Connect.Client.ApiException.#ctor(System.Int32,System.String,System.dynamic)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiException" /> class.
             </summary>
             <param name="errorCode">HTTP status code.</param>
             <param name="message">Error message.</param>
             <param name="errorContent">Error content.</param>
            </member>
        <member name="T:Square.Connect.Client.ApiResponse`1">
             <summary>
             API Response
             </summary>
            </member>
        <member name="P:Square.Connect.Client.ApiResponse`1.StatusCode">
             <summary>
             Gets or sets the status code (HTTP status code)
             </summary>
             <value>The status code.</value>
            </member>
        <member name="P:Square.Connect.Client.ApiResponse`1.Headers">
             <summary>
             Gets or sets the HTTP headers
             </summary>
             <value>HTTP headers</value>
            </member>
        <member name="P:Square.Connect.Client.ApiResponse`1.Data">
             <summary>
             Gets or sets the data (parsed HTTP body)
             </summary>
             <value>The data.</value>
            </member>
        <member name="M:Square.Connect.Client.ApiResponse`1.#ctor(System.Int32,System.Collections.Generic.IDictionary{System.String,System.String},`0)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiResponse`1" /> class.
             </summary>
             <param name="statusCode">HTTP status code.</param>
             <param name="headers">HTTP headers.</param>
             <param name="data">Data (parsed HTTP body)</param>
            </member>
        <member name="T:Square.Connect.Client.Configuration">
             <summary>
             Represents a set of configuration settings
             </summary>
            </member>
        <member name="M:Square.Connect.Client.Configuration.#ctor(Square.Connect.Client.ApiClient,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.Int32,System.String)">
             <summary>
             Initializes a new instance of the Configuration class with different settings
             </summary>
             <param name="apiClient">Api client</param>
             <param name="defaultHeader">Dictionary of default HTTP header</param>
             <param name="username">Username</param>
             <param name="password">Password</param>
             <param name="accessToken">accessToken</param>
             <param name="apiKey">Dictionary of API key</param>
             <param name="apiKeyPrefix">Dictionary of API key prefix</param>
             <param name="tempFolderPath">Temp folder path</param>
             <param name="dateTimeFormat">DateTime format string</param>
             <param name="timeout">HTTP connection timeout (in milliseconds)</param>
             <param name="userAgent">HTTP user agent</param>
            </member>
        <member name="M:Square.Connect.Client.Configuration.#ctor(Square.Connect.Client.ApiClient)">
             <summary>
             Initializes a new instance of the Configuration class.
             </summary>
             <param name="apiClient">Api client.</param>
            </member>
        <member name="F:Square.Connect.Client.Configuration.Version">
             <summary>
             Version of the package.
             </summary>
             <value>Version of the package.</value>
            </member>
        <member name="F:Square.Connect.Client.Configuration.Default">
             <summary>
             Gets or sets the default Configuration.
             </summary>
             <value>Configuration.</value>
            </member>
        <member name="F:Square.Connect.Client.Configuration.DefaultExceptionFactory">
             <summary>
             Default creation of exceptions for a given method name and response object
             </summary>
            </member>
        <member name="P:Square.Connect.Client.Configuration.Timeout">
             <summary>
             Gets or sets the HTTP timeout (milliseconds) of ApiClient. Default to 100000 milliseconds.
             </summary>
             <value>Timeout.</value>
            </member>
        <member name="F:Square.Connect.Client.Configuration.ApiClient">
             <summary>
             Gets or sets the default API client for making HTTP calls.
             </summary>
             <value>The API client.</value>
            </member>
        <member name="M:Square.Connect.Client.Configuration.setApiClientUsingDefault(Square.Connect.Client.ApiClient)">
             <summary>
             Set the ApiClient using Default or ApiClient instance.
             </summary>
             <param name="apiClient">An instance of ApiClient.</param>
             <returns></returns>
            </member>
        <member name="P:Square.Connect.Client.Configuration.DefaultHeader">
             <summary>
             Gets or sets the default header.
             </summary>
            </member>
        <member name="M:Square.Connect.Client.Configuration.AddDefaultHeader(System.String,System.String)">
             <summary>
             Add default header.
             </summary>
             <param name="key">Header field name.</param>
             <param name="value">Header field value.</param>
             <returns></returns>
            </member>
        <member name="P:Square.Connect.Client.Configuration.UserAgent">
             <summary>
             Gets or sets the HTTP user agent.
             </summary>
             <value>Http user agent.</value>
            </member>
        <member name="P:Square.Connect.Client.Configuration.Username">
             <summary>
             Gets or sets the username (HTTP basic authentication).
             </summary>
             <value>The username.</value>
            </member>
        <member name="P:Square.Connect.Client.Configuration.Password">
             <summary>
             Gets or sets the password (HTTP basic authentication).
             </summary>
             <value>The password.</value>
            </member>
        <member name="P:Square.Connect.Client.Configuration.AccessToken">
             <summary>
             Gets or sets the access token for OAuth2 authentication.
             </summary>
             <value>The access token.</value>
            </member>
        <member name="F:Square.Connect.Client.Configuration.ApiKey">
             <summary>
             Gets or sets the API key based on the authentication name.
             </summary>
             <value>The API key.</value>
            </member>
        <member name="F:Square.Connect.Client.Configuration.ApiKeyPrefix">
             <summary>
             Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
             </summary>
             <value>The prefix of the API key.</value>
            </member>
        <member name="M:Square.Connect.Client.Configuration.GetApiKeyWithPrefix(System.String)">
             <summary>
             Get the API key with prefix.
             </summary>
             <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
             <returns>API key with prefix.</returns>
            </member>
        <member name="P:Square.Connect.Client.Configuration.TempFolderPath">
             <summary>
             Gets or sets the temporary folder path to store the files downloaded from the server.
             </summary>
             <value>Folder path.</value>
            </member>
        <member name="P:Square.Connect.Client.Configuration.DateTimeFormat">
             <summary>
             Gets or sets the the date time format used when serializing in the ApiClient
             By default, it's set to ISO 8601 - "o", for others see:
             https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx
             and https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx
             No validation is done to ensure that the string you're providing is valid
             </summary>
             <value>The DateTimeFormat string</value>
            </member>
        <member name="M:Square.Connect.Client.Configuration.ToDebugReport">
             <summary>
             Returns a string with essential information for debugging.
             </summary>
            </member>
        <member name="T:Square.Connect.Client.ExceptionFactory">
             <summary>
             A delegate to ExceptionFactory method
             </summary>
             <param name="methodName">Method name</param>
             <param name="response">Response</param>
             <returns>Exceptions</returns>
            </member>
        <member name="T:Square.Connect.Client.IApiAccessor">
             <summary>
             Represents configuration aspects required to interact with the API endpoints.
             </summary>
            </member>
        <member name="P:Square.Connect.Client.IApiAccessor.Configuration">
             <summary>
             Gets or sets the configuration object
             </summary>
             <value>An instance of the Configuration</value>
            </member>
        <member name="M:Square.Connect.Client.IApiAccessor.GetBasePath">
             <summary>
             Gets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="P:Square.Connect.Client.IApiAccessor.ExceptionFactory">
             <summary>
             Provides a factory method hook for the creation of exceptions.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Address">
             <summary>
             Represents a physical address.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Address.CountryEnum">
             <summary>
             The address's country, in ISO 3166-1-alpha-2 format.
             </summary>
             <value>The address's country, in ISO 3166-1-alpha-2 format.</value>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ZZ">
             <summary>
             Enum ZZ for "ZZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AD">
             <summary>
             Enum AD for "AD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AE">
             <summary>
             Enum AE for "AE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AF">
             <summary>
             Enum AF for "AF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AG">
             <summary>
             Enum AG for "AG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AI">
             <summary>
             Enum AI for "AI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AL">
             <summary>
             Enum AL for "AL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AM">
             <summary>
             Enum AM for "AM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AO">
             <summary>
             Enum AO for "AO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AQ">
             <summary>
             Enum AQ for "AQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AR">
             <summary>
             Enum AR for "AR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AS">
             <summary>
             Enum AS for "AS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AT">
             <summary>
             Enum AT for "AT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AU">
             <summary>
             Enum AU for "AU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AW">
             <summary>
             Enum AW for "AW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AX">
             <summary>
             Enum AX for "AX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AZ">
             <summary>
             Enum AZ for "AZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BA">
             <summary>
             Enum BA for "BA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BB">
             <summary>
             Enum BB for "BB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BD">
             <summary>
             Enum BD for "BD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BE">
             <summary>
             Enum BE for "BE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BF">
             <summary>
             Enum BF for "BF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BG">
             <summary>
             Enum BG for "BG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BH">
             <summary>
             Enum BH for "BH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BI">
             <summary>
             Enum BI for "BI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BJ">
             <summary>
             Enum BJ for "BJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BL">
             <summary>
             Enum BL for "BL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BM">
             <summary>
             Enum BM for "BM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BN">
             <summary>
             Enum BN for "BN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BO">
             <summary>
             Enum BO for "BO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BQ">
             <summary>
             Enum BQ for "BQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BR">
             <summary>
             Enum BR for "BR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BS">
             <summary>
             Enum BS for "BS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BT">
             <summary>
             Enum BT for "BT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BV">
             <summary>
             Enum BV for "BV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BW">
             <summary>
             Enum BW for "BW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BY">
             <summary>
             Enum BY for "BY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BZ">
             <summary>
             Enum BZ for "BZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CA">
             <summary>
             Enum CA for "CA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CC">
             <summary>
             Enum CC for "CC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CD">
             <summary>
             Enum CD for "CD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CF">
             <summary>
             Enum CF for "CF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CG">
             <summary>
             Enum CG for "CG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CH">
             <summary>
             Enum CH for "CH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CI">
             <summary>
             Enum CI for "CI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CK">
             <summary>
             Enum CK for "CK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CL">
             <summary>
             Enum CL for "CL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CM">
             <summary>
             Enum CM for "CM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CN">
             <summary>
             Enum CN for "CN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CO">
             <summary>
             Enum CO for "CO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CR">
             <summary>
             Enum CR for "CR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CU">
             <summary>
             Enum CU for "CU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CV">
             <summary>
             Enum CV for "CV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CW">
             <summary>
             Enum CW for "CW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CX">
             <summary>
             Enum CX for "CX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CY">
             <summary>
             Enum CY for "CY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CZ">
             <summary>
             Enum CZ for "CZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.DE">
             <summary>
             Enum DE for "DE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.DJ">
             <summary>
             Enum DJ for "DJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.DK">
             <summary>
             Enum DK for "DK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.DM">
             <summary>
             Enum DM for "DM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.DO">
             <summary>
             Enum DO for "DO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.DZ">
             <summary>
             Enum DZ for "DZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.EC">
             <summary>
             Enum EC for "EC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.EE">
             <summary>
             Enum EE for "EE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.EG">
             <summary>
             Enum EG for "EG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.EH">
             <summary>
             Enum EH for "EH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ER">
             <summary>
             Enum ER for "ER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ES">
             <summary>
             Enum ES for "ES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ET">
             <summary>
             Enum ET for "ET"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.FI">
             <summary>
             Enum FI for "FI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.FJ">
             <summary>
             Enum FJ for "FJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.FK">
             <summary>
             Enum FK for "FK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.FM">
             <summary>
             Enum FM for "FM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.FO">
             <summary>
             Enum FO for "FO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.FR">
             <summary>
             Enum FR for "FR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GA">
             <summary>
             Enum GA for "GA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GB">
             <summary>
             Enum GB for "GB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GD">
             <summary>
             Enum GD for "GD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GE">
             <summary>
             Enum GE for "GE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GF">
             <summary>
             Enum GF for "GF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GG">
             <summary>
             Enum GG for "GG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GH">
             <summary>
             Enum GH for "GH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GI">
             <summary>
             Enum GI for "GI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GL">
             <summary>
             Enum GL for "GL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GM">
             <summary>
             Enum GM for "GM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GN">
             <summary>
             Enum GN for "GN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GP">
             <summary>
             Enum GP for "GP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GQ">
             <summary>
             Enum GQ for "GQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GR">
             <summary>
             Enum GR for "GR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GS">
             <summary>
             Enum GS for "GS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GT">
             <summary>
             Enum GT for "GT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GU">
             <summary>
             Enum GU for "GU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GW">
             <summary>
             Enum GW for "GW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GY">
             <summary>
             Enum GY for "GY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.HK">
             <summary>
             Enum HK for "HK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.HM">
             <summary>
             Enum HM for "HM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.HN">
             <summary>
             Enum HN for "HN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.HR">
             <summary>
             Enum HR for "HR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.HT">
             <summary>
             Enum HT for "HT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.HU">
             <summary>
             Enum HU for "HU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ID">
             <summary>
             Enum ID for "ID"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IE">
             <summary>
             Enum IE for "IE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IL">
             <summary>
             Enum IL for "IL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IM">
             <summary>
             Enum IM for "IM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IN">
             <summary>
             Enum IN for "IN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IO">
             <summary>
             Enum IO for "IO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IQ">
             <summary>
             Enum IQ for "IQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IR">
             <summary>
             Enum IR for "IR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IS">
             <summary>
             Enum IS for "IS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IT">
             <summary>
             Enum IT for "IT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.JE">
             <summary>
             Enum JE for "JE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.JM">
             <summary>
             Enum JM for "JM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.JO">
             <summary>
             Enum JO for "JO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.JP">
             <summary>
             Enum JP for "JP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KE">
             <summary>
             Enum KE for "KE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KG">
             <summary>
             Enum KG for "KG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KH">
             <summary>
             Enum KH for "KH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KI">
             <summary>
             Enum KI for "KI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KM">
             <summary>
             Enum KM for "KM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KN">
             <summary>
             Enum KN for "KN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KP">
             <summary>
             Enum KP for "KP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KR">
             <summary>
             Enum KR for "KR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KW">
             <summary>
             Enum KW for "KW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KY">
             <summary>
             Enum KY for "KY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KZ">
             <summary>
             Enum KZ for "KZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LA">
             <summary>
             Enum LA for "LA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LB">
             <summary>
             Enum LB for "LB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LC">
             <summary>
             Enum LC for "LC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LI">
             <summary>
             Enum LI for "LI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LK">
             <summary>
             Enum LK for "LK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LR">
             <summary>
             Enum LR for "LR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LS">
             <summary>
             Enum LS for "LS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LT">
             <summary>
             Enum LT for "LT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LU">
             <summary>
             Enum LU for "LU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LV">
             <summary>
             Enum LV for "LV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LY">
             <summary>
             Enum LY for "LY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MA">
             <summary>
             Enum MA for "MA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MC">
             <summary>
             Enum MC for "MC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MD">
             <summary>
             Enum MD for "MD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ME">
             <summary>
             Enum ME for "ME"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MF">
             <summary>
             Enum MF for "MF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MG">
             <summary>
             Enum MG for "MG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MH">
             <summary>
             Enum MH for "MH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MK">
             <summary>
             Enum MK for "MK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ML">
             <summary>
             Enum ML for "ML"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MM">
             <summary>
             Enum MM for "MM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MN">
             <summary>
             Enum MN for "MN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MO">
             <summary>
             Enum MO for "MO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MP">
             <summary>
             Enum MP for "MP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MQ">
             <summary>
             Enum MQ for "MQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MR">
             <summary>
             Enum MR for "MR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MS">
             <summary>
             Enum MS for "MS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MT">
             <summary>
             Enum MT for "MT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MU">
             <summary>
             Enum MU for "MU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MV">
             <summary>
             Enum MV for "MV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MW">
             <summary>
             Enum MW for "MW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MX">
             <summary>
             Enum MX for "MX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MY">
             <summary>
             Enum MY for "MY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MZ">
             <summary>
             Enum MZ for "MZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NA">
             <summary>
             Enum NA for "NA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NC">
             <summary>
             Enum NC for "NC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NE">
             <summary>
             Enum NE for "NE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NF">
             <summary>
             Enum NF for "NF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NG">
             <summary>
             Enum NG for "NG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NI">
             <summary>
             Enum NI for "NI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NL">
             <summary>
             Enum NL for "NL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NO">
             <summary>
             Enum NO for "NO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NP">
             <summary>
             Enum NP for "NP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NR">
             <summary>
             Enum NR for "NR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NU">
             <summary>
             Enum NU for "NU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NZ">
             <summary>
             Enum NZ for "NZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.OM">
             <summary>
             Enum OM for "OM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PA">
             <summary>
             Enum PA for "PA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PE">
             <summary>
             Enum PE for "PE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PF">
             <summary>
             Enum PF for "PF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PG">
             <summary>
             Enum PG for "PG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PH">
             <summary>
             Enum PH for "PH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PK">
             <summary>
             Enum PK for "PK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PL">
             <summary>
             Enum PL for "PL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PM">
             <summary>
             Enum PM for "PM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PN">
             <summary>
             Enum PN for "PN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PR">
             <summary>
             Enum PR for "PR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PS">
             <summary>
             Enum PS for "PS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PT">
             <summary>
             Enum PT for "PT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PW">
             <summary>
             Enum PW for "PW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PY">
             <summary>
             Enum PY for "PY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.QA">
             <summary>
             Enum QA for "QA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.RE">
             <summary>
             Enum RE for "RE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.RO">
             <summary>
             Enum RO for "RO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.RS">
             <summary>
             Enum RS for "RS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.RU">
             <summary>
             Enum RU for "RU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.RW">
             <summary>
             Enum RW for "RW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SA">
             <summary>
             Enum SA for "SA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SB">
             <summary>
             Enum SB for "SB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SC">
             <summary>
             Enum SC for "SC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SD">
             <summary>
             Enum SD for "SD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SE">
             <summary>
             Enum SE for "SE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SG">
             <summary>
             Enum SG for "SG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SH">
             <summary>
             Enum SH for "SH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SI">
             <summary>
             Enum SI for "SI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SJ">
             <summary>
             Enum SJ for "SJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SK">
             <summary>
             Enum SK for "SK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SL">
             <summary>
             Enum SL for "SL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SM">
             <summary>
             Enum SM for "SM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SN">
             <summary>
             Enum SN for "SN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SO">
             <summary>
             Enum SO for "SO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SR">
             <summary>
             Enum SR for "SR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SS">
             <summary>
             Enum SS for "SS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ST">
             <summary>
             Enum ST for "ST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SV">
             <summary>
             Enum SV for "SV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SX">
             <summary>
             Enum SX for "SX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SY">
             <summary>
             Enum SY for "SY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SZ">
             <summary>
             Enum SZ for "SZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TC">
             <summary>
             Enum TC for "TC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TD">
             <summary>
             Enum TD for "TD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TF">
             <summary>
             Enum TF for "TF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TG">
             <summary>
             Enum TG for "TG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TH">
             <summary>
             Enum TH for "TH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TJ">
             <summary>
             Enum TJ for "TJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TK">
             <summary>
             Enum TK for "TK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TL">
             <summary>
             Enum TL for "TL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TM">
             <summary>
             Enum TM for "TM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TN">
             <summary>
             Enum TN for "TN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TO">
             <summary>
             Enum TO for "TO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TR">
             <summary>
             Enum TR for "TR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TT">
             <summary>
             Enum TT for "TT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TV">
             <summary>
             Enum TV for "TV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TW">
             <summary>
             Enum TW for "TW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TZ">
             <summary>
             Enum TZ for "TZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.UA">
             <summary>
             Enum UA for "UA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.UG">
             <summary>
             Enum UG for "UG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.UM">
             <summary>
             Enum UM for "UM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.US">
             <summary>
             Enum US for "US"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.UY">
             <summary>
             Enum UY for "UY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.UZ">
             <summary>
             Enum UZ for "UZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.VA">
             <summary>
             Enum VA for "VA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.VC">
             <summary>
             Enum VC for "VC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.VE">
             <summary>
             Enum VE for "VE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.VG">
             <summary>
             Enum VG for "VG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.VI">
             <summary>
             Enum VI for "VI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.VN">
             <summary>
             Enum VN for "VN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.VU">
             <summary>
             Enum VU for "VU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.WF">
             <summary>
             Enum WF for "WF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.WS">
             <summary>
             Enum WS for "WS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.YE">
             <summary>
             Enum YE for "YE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.YT">
             <summary>
             Enum YT for "YT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ZA">
             <summary>
             Enum ZA for "ZA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ZM">
             <summary>
             Enum ZM for "ZM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ZW">
             <summary>
             Enum ZW for "ZW"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.Address.Country">
             <summary>
             The address's country, in ISO 3166-1-alpha-2 format.
             </summary>
             <value>The address's country, in ISO 3166-1-alpha-2 format.</value>
            </member>
        <member name="M:Square.Connect.Model.Address.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{Square.Connect.Model.Address.CountryEnum},System.String,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Address" /> class.
             </summary>
             <param name="AddressLine1">The first line of the address.  Fields that start with `address_line` provide the address's most specific details, like street number, street name, and building name. They do *not* provide less specific details like city, state/province, or country (these details are provided in other fields)..</param>
             <param name="AddressLine2">The second line of the address, if any..</param>
             <param name="AddressLine3">The third line of the address, if any..</param>
             <param name="Locality">The city or town of the address..</param>
             <param name="Sublocality">A civil region within the address's `locality`, if any..</param>
             <param name="Sublocality2">A civil region within the address's `sublocality`, if any..</param>
             <param name="Sublocality3">A civil region within the address's `sublocality_2`, if any..</param>
             <param name="AdministrativeDistrictLevel1">A civil entity within the address's country. In the US, this is the state..</param>
             <param name="AdministrativeDistrictLevel2">A civil entity within the address's `administrative_district_level_1`. In the US, this is the county..</param>
             <param name="AdministrativeDistrictLevel3">A civil entity within the address's `administrative_district_level_2`, if any..</param>
             <param name="PostalCode">The address's postal code..</param>
             <param name="Country">The address's country, in ISO 3166-1-alpha-2 format..</param>
             <param name="FirstName">Optional first name when it's representing recipient..</param>
             <param name="LastName">Optional last name when it's representing recipient..</param>
             <param name="Organization">Optional organization name when it's representing recipient..</param>
            </member>
        <member name="P:Square.Connect.Model.Address.AddressLine1">
             <summary>
             The first line of the address.  Fields that start with `address_line` provide the address's most specific details, like street number, street name, and building name. They do *not* provide less specific details like city, state/province, or country (these details are provided in other fields).
             </summary>
             <value>The first line of the address.  Fields that start with `address_line` provide the address's most specific details, like street number, street name, and building name. They do *not* provide less specific details like city, state/province, or country (these details are provided in other fields).</value>
            </member>
        <member name="P:Square.Connect.Model.Address.AddressLine2">
             <summary>
             The second line of the address, if any.
             </summary>
             <value>The second line of the address, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.Address.AddressLine3">
             <summary>
             The third line of the address, if any.
             </summary>
             <value>The third line of the address, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.Address.Locality">
             <summary>
             The city or town of the address.
             </summary>
             <value>The city or town of the address.</value>
            </member>
        <member name="P:Square.Connect.Model.Address.Sublocality">
             <summary>
             A civil region within the address's `locality`, if any.
             </summary>
             <value>A civil region within the address's `locality`, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.Address.Sublocality2">
             <summary>
             A civil region within the address's `sublocality`, if any.
             </summary>
             <value>A civil region within the address's `sublocality`, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.Address.Sublocality3">
             <summary>
             A civil region within the address's `sublocality_2`, if any.
             </summary>
             <value>A civil region within the address's `sublocality_2`, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.Address.AdministrativeDistrictLevel1">
             <summary>
             A civil entity within the address's country. In the US, this is the state.
             </summary>
             <value>A civil entity within the address's country. In the US, this is the state.</value>
            </member>
        <member name="P:Square.Connect.Model.Address.AdministrativeDistrictLevel2">
             <summary>
             A civil entity within the address's `administrative_district_level_1`. In the US, this is the county.
             </summary>
             <value>A civil entity within the address's `administrative_district_level_1`. In the US, this is the county.</value>
            </member>
        <member name="P:Square.Connect.Model.Address.AdministrativeDistrictLevel3">
             <summary>
             A civil entity within the address's `administrative_district_level_2`, if any.
             </summary>
             <value>A civil entity within the address's `administrative_district_level_2`, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.Address.PostalCode">
             <summary>
             The address's postal code.
             </summary>
             <value>The address's postal code.</value>
            </member>
        <member name="P:Square.Connect.Model.Address.FirstName">
             <summary>
             Optional first name when it's representing recipient.
             </summary>
             <value>Optional first name when it's representing recipient.</value>
            </member>
        <member name="P:Square.Connect.Model.Address.LastName">
             <summary>
             Optional last name when it's representing recipient.
             </summary>
             <value>Optional last name when it's representing recipient.</value>
            </member>
        <member name="P:Square.Connect.Model.Address.Organization">
             <summary>
             Optional organization name when it's representing recipient.
             </summary>
             <value>Optional organization name when it's representing recipient.</value>
            </member>
        <member name="M:Square.Connect.Model.Address.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Address.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Address.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Address.Equals(Square.Connect.Model.Address)">
             <summary>
             Returns true if Address instances are equal
             </summary>
             <param name="other">Instance of Address to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Address.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CaptureTransactionRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CaptureTransactionRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionRequest.Equals(Square.Connect.Model.CaptureTransactionRequest)">
             <summary>
             Returns true if CaptureTransactionRequest instances are equal
             </summary>
             <param name="other">Instance of CaptureTransactionRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CaptureTransactionResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [CaptureTransaction](#endpoint-capturetransaction) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CaptureTransactionResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
            </member>
        <member name="P:Square.Connect.Model.CaptureTransactionResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionResponse.Equals(Square.Connect.Model.CaptureTransactionResponse)">
             <summary>
             Returns true if CaptureTransactionResponse instances are equal
             </summary>
             <param name="other">Instance of CaptureTransactionResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.Card">
             <summary>
             Represents the non-confidential details of a credit card.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Card.CardBrandEnum">
             <summary>
             The card's brand (such as `VISA`). See [CardBrand](#type-cardbrand) for all possible values.
             </summary>
             <value>The card's brand (such as `VISA`). See [CardBrand](#type-cardbrand) for all possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.OTHERBRAND">
             <summary>
             Enum OTHERBRAND for "OTHER_BRAND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.VISA">
             <summary>
             Enum VISA for "VISA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.MASTERCARD">
             <summary>
             Enum MASTERCARD for "MASTERCARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.AMERICANEXPRESS">
             <summary>
             Enum AMERICANEXPRESS for "AMERICAN_EXPRESS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.DISCOVER">
             <summary>
             Enum DISCOVER for "DISCOVER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.DISCOVERDINERS">
             <summary>
             Enum DISCOVERDINERS for "DISCOVER_DINERS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.JCB">
             <summary>
             Enum JCB for "JCB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.CHINAUNIONPAY">
             <summary>
             Enum CHINAUNIONPAY for "CHINA_UNIONPAY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.SQUAREGIFTCARD">
             <summary>
             Enum SQUAREGIFTCARD for "SQUARE_GIFT_CARD"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.Card.CardBrand">
             <summary>
             The card's brand (such as `VISA`). See [CardBrand](#type-cardbrand) for all possible values.
             </summary>
             <value>The card's brand (such as `VISA`). See [CardBrand](#type-cardbrand) for all possible values.</value>
            </member>
        <member name="M:Square.Connect.Model.Card.#ctor(System.String,System.Nullable{Square.Connect.Model.Card.CardBrandEnum},System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,Square.Connect.Model.Address)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Card" /> class.
             </summary>
             <param name="Id">The card's unique ID, if any..</param>
             <param name="CardBrand">The card's brand (such as `VISA`). See [CardBrand](#type-cardbrand) for all possible values..</param>
             <param name="Last4">The last 4 digits of the card's number..</param>
             <param name="ExpMonth">The month of the card's expiration date. This value is always between `1` and `12`, inclusive..</param>
             <param name="ExpYear">The four-digit year of the card's expiration date..</param>
             <param name="CardholderName">The cardholder name. This value is present only if this object represents a customer's card on file..</param>
             <param name="BillingAddress">The card's billing address. This value is present only if this object represents a customer's card on file..</param>
            </member>
        <member name="P:Square.Connect.Model.Card.Id">
             <summary>
             The card's unique ID, if any.
             </summary>
             <value>The card's unique ID, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.Card.Last4">
             <summary>
             The last 4 digits of the card's number.
             </summary>
             <value>The last 4 digits of the card's number.</value>
            </member>
        <member name="P:Square.Connect.Model.Card.ExpMonth">
             <summary>
             The month of the card's expiration date. This value is always between `1` and `12`, inclusive.
             </summary>
             <value>The month of the card's expiration date. This value is always between `1` and `12`, inclusive.</value>
            </member>
        <member name="P:Square.Connect.Model.Card.ExpYear">
             <summary>
             The four-digit year of the card's expiration date.
             </summary>
             <value>The four-digit year of the card's expiration date.</value>
            </member>
        <member name="P:Square.Connect.Model.Card.CardholderName">
             <summary>
             The cardholder name. This value is present only if this object represents a customer's card on file.
             </summary>
             <value>The cardholder name. This value is present only if this object represents a customer's card on file.</value>
            </member>
        <member name="P:Square.Connect.Model.Card.BillingAddress">
             <summary>
             The card's billing address. This value is present only if this object represents a customer's card on file.
             </summary>
             <value>The card's billing address. This value is present only if this object represents a customer's card on file.</value>
            </member>
        <member name="M:Square.Connect.Model.Card.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Card.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Card.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Card.Equals(Square.Connect.Model.Card)">
             <summary>
             Returns true if Card instances are equal
             </summary>
             <param name="other">Instance of Card to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Card.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CardBrand">
             <summary>
             Indicates a credit card's brand, such as `VISA`.
             </summary>
             <value>Indicates a credit card's brand, such as `VISA`.</value>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.OTHERBRAND">
             <summary>
             Enum OTHERBRAND for "OTHER_BRAND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.VISA">
             <summary>
             Enum VISA for "VISA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.MASTERCARD">
             <summary>
             Enum MASTERCARD for "MASTERCARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.AMERICANEXPRESS">
             <summary>
             Enum AMERICANEXPRESS for "AMERICAN_EXPRESS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.DISCOVER">
             <summary>
             Enum DISCOVER for "DISCOVER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.DISCOVERDINERS">
             <summary>
             Enum DISCOVERDINERS for "DISCOVER_DINERS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.JCB">
             <summary>
             Enum JCB for "JCB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.CHINAUNIONPAY">
             <summary>
             Enum CHINAUNIONPAY for "CHINA_UNIONPAY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.SQUAREGIFTCARD">
             <summary>
             Enum SQUAREGIFTCARD for "SQUARE_GIFT_CARD"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.ChargeRequest">
             <summary>
             Defines the parameters that can be included in the body of a request to the [Charge](#endpoint-charge) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ChargeRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequest.#ctor(System.String,Square.Connect.Model.Money,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,Square.Connect.Model.Address,Square.Connect.Model.Address,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ChargeRequest" /> class.
             </summary>
             <param name="IdempotencyKey">A value you specify that uniquely identifies this transaction among transactions you've created.  If you're unsure whether a particular transaction succeeded, you can reattempt it with the same idempotency key without worrying about double-charging the buyer.  See [Idempotency keys](#idempotencykeys) for more information. (required).</param>
             <param name="AmountMoney">The amount of money to charge.  Note that you specify the amount in the __smallest denomination of the applicable currency__. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](#workingwithmonetaryamounts) for details.  The value of `currency` must match the currency associated with the business that is charging the card. (required).</param>
             <param name="CardNonce">A nonce generated from the `SqPaymentForm` that represents the card to charge.  The application that provides a nonce to this endpoint must be the _same application_ that generated the nonce with the `SqPaymentForm`. Otherwise, the nonce is invalid.  Do not provide a value for this field if you provide a value for `customer_card_id`..</param>
             <param name="CustomerCardId">The ID of the customer card on file to charge. Do not provide a value for this field if you provide a value for `card_nonce`.  If you provide this value, you _must_ also provide a value for `customer_id`..</param>
             <param name="DelayCapture">If `true`, the request will only perform an Auth on the provided card. You can then later perform either a Capture (with the [CaptureTransaction](#endpoint-capturetransaction) endpoint) or a Void (with the [VoidTransation](#endpoint-voidtransaction) endpoint).  Default value: `false`.</param>
             <param name="ReferenceId">An optional ID you can associate with the transaction for your own purposes (such as to associate the transaction with an entity ID in your own database).  This value cannot exceed 40 characters..</param>
             <param name="Note">An optional note to associate with the transaction.  This value cannot exceed 60 characters..</param>
             <param name="CustomerId">The ID of the customer to associate this transaction with. This field is required if you provide a value for `customer_card_id`, and optional otherwise..</param>
             <param name="BillingAddress">The buyer's billing address. This value is optional, but this transaction is ineligible for chargeback protection if neither this parameter nor `shipping_address` is provided..</param>
             <param name="ShippingAddress">The buyer's shipping address, if available. This value is optional, but this transaction is ineligible for chargeback protection if neither this parameter nor `billing_address` is provided..</param>
             <param name="BuyerEmailAddress">The buyer's email address, if available. This value is optional, but this transaction is ineligible for chargeback protection if it is not provided..</param>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.IdempotencyKey">
             <summary>
             A value you specify that uniquely identifies this transaction among transactions you've created.  If you're unsure whether a particular transaction succeeded, you can reattempt it with the same idempotency key without worrying about double-charging the buyer.  See [Idempotency keys](#idempotencykeys) for more information.
             </summary>
             <value>A value you specify that uniquely identifies this transaction among transactions you've created.  If you're unsure whether a particular transaction succeeded, you can reattempt it with the same idempotency key without worrying about double-charging the buyer.  See [Idempotency keys](#idempotencykeys) for more information.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.AmountMoney">
             <summary>
             The amount of money to charge.  Note that you specify the amount in the __smallest denomination of the applicable currency__. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](#workingwithmonetaryamounts) for details.  The value of `currency` must match the currency associated with the business that is charging the card.
             </summary>
             <value>The amount of money to charge.  Note that you specify the amount in the __smallest denomination of the applicable currency__. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](#workingwithmonetaryamounts) for details.  The value of `currency` must match the currency associated with the business that is charging the card.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.CardNonce">
             <summary>
             A nonce generated from the `SqPaymentForm` that represents the card to charge.  The application that provides a nonce to this endpoint must be the _same application_ that generated the nonce with the `SqPaymentForm`. Otherwise, the nonce is invalid.  Do not provide a value for this field if you provide a value for `customer_card_id`.
             </summary>
             <value>A nonce generated from the `SqPaymentForm` that represents the card to charge.  The application that provides a nonce to this endpoint must be the _same application_ that generated the nonce with the `SqPaymentForm`. Otherwise, the nonce is invalid.  Do not provide a value for this field if you provide a value for `customer_card_id`.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.CustomerCardId">
             <summary>
             The ID of the customer card on file to charge. Do not provide a value for this field if you provide a value for `card_nonce`.  If you provide this value, you _must_ also provide a value for `customer_id`.
             </summary>
             <value>The ID of the customer card on file to charge. Do not provide a value for this field if you provide a value for `card_nonce`.  If you provide this value, you _must_ also provide a value for `customer_id`.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.DelayCapture">
             <summary>
             If `true`, the request will only perform an Auth on the provided card. You can then later perform either a Capture (with the [CaptureTransaction](#endpoint-capturetransaction) endpoint) or a Void (with the [VoidTransation](#endpoint-voidtransaction) endpoint).  Default value: `false`
             </summary>
             <value>If `true`, the request will only perform an Auth on the provided card. You can then later perform either a Capture (with the [CaptureTransaction](#endpoint-capturetransaction) endpoint) or a Void (with the [VoidTransation](#endpoint-voidtransaction) endpoint).  Default value: `false`</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.ReferenceId">
             <summary>
             An optional ID you can associate with the transaction for your own purposes (such as to associate the transaction with an entity ID in your own database).  This value cannot exceed 40 characters.
             </summary>
             <value>An optional ID you can associate with the transaction for your own purposes (such as to associate the transaction with an entity ID in your own database).  This value cannot exceed 40 characters.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.Note">
             <summary>
             An optional note to associate with the transaction.  This value cannot exceed 60 characters.
             </summary>
             <value>An optional note to associate with the transaction.  This value cannot exceed 60 characters.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.CustomerId">
             <summary>
             The ID of the customer to associate this transaction with. This field is required if you provide a value for `customer_card_id`, and optional otherwise.
             </summary>
             <value>The ID of the customer to associate this transaction with. This field is required if you provide a value for `customer_card_id`, and optional otherwise.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.BillingAddress">
             <summary>
             The buyer's billing address. This value is optional, but this transaction is ineligible for chargeback protection if neither this parameter nor `shipping_address` is provided.
             </summary>
             <value>The buyer's billing address. This value is optional, but this transaction is ineligible for chargeback protection if neither this parameter nor `shipping_address` is provided.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.ShippingAddress">
             <summary>
             The buyer's shipping address, if available. This value is optional, but this transaction is ineligible for chargeback protection if neither this parameter nor `billing_address` is provided.
             </summary>
             <value>The buyer's shipping address, if available. This value is optional, but this transaction is ineligible for chargeback protection if neither this parameter nor `billing_address` is provided.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.BuyerEmailAddress">
             <summary>
             The buyer's email address, if available. This value is optional, but this transaction is ineligible for chargeback protection if it is not provided.
             </summary>
             <value>The buyer's email address, if available. This value is optional, but this transaction is ineligible for chargeback protection if it is not provided.</value>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequest.Equals(Square.Connect.Model.ChargeRequest)">
             <summary>
             Returns true if ChargeRequest instances are equal
             </summary>
             <param name="other">Instance of ChargeRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ChargeResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [Charge](#endpoint-charge) endpoint.  One of `errors` or `transaction` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ChargeResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Transaction)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ChargeResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Transaction">The created transaction..</param>
            </member>
        <member name="P:Square.Connect.Model.ChargeResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeResponse.Transaction">
             <summary>
             The created transaction.
             </summary>
             <value>The created transaction.</value>
            </member>
        <member name="M:Square.Connect.Model.ChargeResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeResponse.Equals(Square.Connect.Model.ChargeResponse)">
             <summary>
             Returns true if ChargeResponse instances are equal
             </summary>
             <param name="other">Instance of ChargeResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.Checkout">
             <summary>
             Square Checkout lets merchants accept online payments for supported payment types using a checkout workflow hosted on squareup.com.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.Checkout.#ctor(System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,Square.Connect.Model.Address,System.String,Square.Connect.Model.Order,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Checkout" /> class.
             </summary>
             <param name="Id">ID generated by Square Checkout when a new checkout is requested..</param>
             <param name="CheckoutPageUrl">The URL that the buyer's browser should be redirected to after the checkout is completed..</param>
             <param name="AskForShippingAddress">If `true`, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default is `false`..</param>
             <param name="MerchantSupportEmail">The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant's Square account.  Default is unset..</param>
             <param name="PrePopulateBuyerEmail">If provided, the buyer's email is pre-populated on the checkout page as an editable text field.  Default is unset..</param>
             <param name="PrePopulateShippingAddress">If provided, the buyer's shipping info is pre-populated on the checkout page as editable text fields.  Default is unset..</param>
             <param name="RedirectUrl">The URL to redirect to after checkout is completed with `checkoutId`, Square's `orderId`, `transactionId`, and `referenceId` appended as URL parameters. For example, if the provided redirect_url is `http://www.example.com/order-complete`, a successful transaction redirects the customer to:  `http://www.example.com/order-complete?checkoutId=xxxxxx&amp;orderId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx`  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow..</param>
             <param name="Order">Order to be checked out..</param>
             <param name="CreatedAt">The time when the checkout was created, in RFC 3339 format..</param>
            </member>
        <member name="P:Square.Connect.Model.Checkout.Id">
             <summary>
             ID generated by Square Checkout when a new checkout is requested.
             </summary>
             <value>ID generated by Square Checkout when a new checkout is requested.</value>
            </member>
        <member name="P:Square.Connect.Model.Checkout.CheckoutPageUrl">
             <summary>
             The URL that the buyer's browser should be redirected to after the checkout is completed.
             </summary>
             <value>The URL that the buyer's browser should be redirected to after the checkout is completed.</value>
            </member>
        <member name="P:Square.Connect.Model.Checkout.AskForShippingAddress">
             <summary>
             If `true`, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default is `false`.
             </summary>
             <value>If `true`, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default is `false`.</value>
            </member>
        <member name="P:Square.Connect.Model.Checkout.MerchantSupportEmail">
             <summary>
             The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant's Square account.  Default is unset.
             </summary>
             <value>The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant's Square account.  Default is unset.</value>
            </member>
        <member name="P:Square.Connect.Model.Checkout.PrePopulateBuyerEmail">
             <summary>
             If provided, the buyer's email is pre-populated on the checkout page as an editable text field.  Default is unset.
             </summary>
             <value>If provided, the buyer's email is pre-populated on the checkout page as an editable text field.  Default is unset.</value>
            </member>
        <member name="P:Square.Connect.Model.Checkout.PrePopulateShippingAddress">
             <summary>
             If provided, the buyer's shipping info is pre-populated on the checkout page as editable text fields.  Default is unset.
             </summary>
             <value>If provided, the buyer's shipping info is pre-populated on the checkout page as editable text fields.  Default is unset.</value>
            </member>
        <member name="P:Square.Connect.Model.Checkout.RedirectUrl">
             <summary>
             The URL to redirect to after checkout is completed with `checkoutId`, Square's `orderId`, `transactionId`, and `referenceId` appended as URL parameters. For example, if the provided redirect_url is `http://www.example.com/order-complete`, a successful transaction redirects the customer to:  `http://www.example.com/order-complete?checkoutId=xxxxxx&amp;orderId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx`  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.
             </summary>
             <value>The URL to redirect to after checkout is completed with `checkoutId`, Square's `orderId`, `transactionId`, and `referenceId` appended as URL parameters. For example, if the provided redirect_url is `http://www.example.com/order-complete`, a successful transaction redirects the customer to:  `http://www.example.com/order-complete?checkoutId=xxxxxx&amp;orderId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx`  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.</value>
            </member>
        <member name="P:Square.Connect.Model.Checkout.Order">
             <summary>
             Order to be checked out.
             </summary>
             <value>Order to be checked out.</value>
            </member>
        <member name="P:Square.Connect.Model.Checkout.CreatedAt">
             <summary>
             The time when the checkout was created, in RFC 3339 format.
             </summary>
             <value>The time when the checkout was created, in RFC 3339 format.</value>
            </member>
        <member name="M:Square.Connect.Model.Checkout.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Checkout.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Checkout.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Checkout.Equals(Square.Connect.Model.Checkout)">
             <summary>
             Returns true if Checkout instances are equal
             </summary>
             <param name="other">Instance of Checkout to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Checkout.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.Country">
             <summary>
             Indicates the country associated with another entity, such as a business. Values are in [ISO 3166-1-alpha-2 format](http://www.iso.org/iso/home/standards/country_codes.htm).
             </summary>
             <value>Indicates the country associated with another entity, such as a business. Values are in [ISO 3166-1-alpha-2 format](http://www.iso.org/iso/home/standards/country_codes.htm).</value>
            </member>
        <member name="F:Square.Connect.Model.Country.ZZ">
             <summary>
             Enum ZZ for "ZZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AD">
             <summary>
             Enum AD for "AD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AE">
             <summary>
             Enum AE for "AE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AF">
             <summary>
             Enum AF for "AF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AG">
             <summary>
             Enum AG for "AG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AI">
             <summary>
             Enum AI for "AI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AL">
             <summary>
             Enum AL for "AL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AM">
             <summary>
             Enum AM for "AM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AO">
             <summary>
             Enum AO for "AO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AQ">
             <summary>
             Enum AQ for "AQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AR">
             <summary>
             Enum AR for "AR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AS">
             <summary>
             Enum AS for "AS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AT">
             <summary>
             Enum AT for "AT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AU">
             <summary>
             Enum AU for "AU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AW">
             <summary>
             Enum AW for "AW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AX">
             <summary>
             Enum AX for "AX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AZ">
             <summary>
             Enum AZ for "AZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BA">
             <summary>
             Enum BA for "BA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BB">
             <summary>
             Enum BB for "BB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BD">
             <summary>
             Enum BD for "BD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BE">
             <summary>
             Enum BE for "BE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BF">
             <summary>
             Enum BF for "BF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BG">
             <summary>
             Enum BG for "BG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BH">
             <summary>
             Enum BH for "BH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BI">
             <summary>
             Enum BI for "BI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BJ">
             <summary>
             Enum BJ for "BJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BL">
             <summary>
             Enum BL for "BL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BM">
             <summary>
             Enum BM for "BM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BN">
             <summary>
             Enum BN for "BN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BO">
             <summary>
             Enum BO for "BO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BQ">
             <summary>
             Enum BQ for "BQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BR">
             <summary>
             Enum BR for "BR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BS">
             <summary>
             Enum BS for "BS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BT">
             <summary>
             Enum BT for "BT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BV">
             <summary>
             Enum BV for "BV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BW">
             <summary>
             Enum BW for "BW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BY">
             <summary>
             Enum BY for "BY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BZ">
             <summary>
             Enum BZ for "BZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CA">
             <summary>
             Enum CA for "CA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CC">
             <summary>
             Enum CC for "CC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CD">
             <summary>
             Enum CD for "CD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CF">
             <summary>
             Enum CF for "CF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CG">
             <summary>
             Enum CG for "CG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CH">
             <summary>
             Enum CH for "CH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CI">
             <summary>
             Enum CI for "CI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CK">
             <summary>
             Enum CK for "CK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CL">
             <summary>
             Enum CL for "CL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CM">
             <summary>
             Enum CM for "CM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CN">
             <summary>
             Enum CN for "CN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CO">
             <summary>
             Enum CO for "CO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CR">
             <summary>
             Enum CR for "CR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CU">
             <summary>
             Enum CU for "CU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CV">
             <summary>
             Enum CV for "CV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CW">
             <summary>
             Enum CW for "CW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CX">
             <summary>
             Enum CX for "CX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CY">
             <summary>
             Enum CY for "CY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CZ">
             <summary>
             Enum CZ for "CZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.DE">
             <summary>
             Enum DE for "DE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.DJ">
             <summary>
             Enum DJ for "DJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.DK">
             <summary>
             Enum DK for "DK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.DM">
             <summary>
             Enum DM for "DM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.DO">
             <summary>
             Enum DO for "DO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.DZ">
             <summary>
             Enum DZ for "DZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.EC">
             <summary>
             Enum EC for "EC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.EE">
             <summary>
             Enum EE for "EE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.EG">
             <summary>
             Enum EG for "EG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.EH">
             <summary>
             Enum EH for "EH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.ER">
             <summary>
             Enum ER for "ER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.ES">
             <summary>
             Enum ES for "ES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.ET">
             <summary>
             Enum ET for "ET"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.FI">
             <summary>
             Enum FI for "FI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.FJ">
             <summary>
             Enum FJ for "FJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.FK">
             <summary>
             Enum FK for "FK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.FM">
             <summary>
             Enum FM for "FM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.FO">
             <summary>
             Enum FO for "FO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.FR">
             <summary>
             Enum FR for "FR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GA">
             <summary>
             Enum GA for "GA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GB">
             <summary>
             Enum GB for "GB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GD">
             <summary>
             Enum GD for "GD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GE">
             <summary>
             Enum GE for "GE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GF">
             <summary>
             Enum GF for "GF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GG">
             <summary>
             Enum GG for "GG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GH">
             <summary>
             Enum GH for "GH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GI">
             <summary>
             Enum GI for "GI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GL">
             <summary>
             Enum GL for "GL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GM">
             <summary>
             Enum GM for "GM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GN">
             <summary>
             Enum GN for "GN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GP">
             <summary>
             Enum GP for "GP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GQ">
             <summary>
             Enum GQ for "GQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GR">
             <summary>
             Enum GR for "GR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GS">
             <summary>
             Enum GS for "GS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GT">
             <summary>
             Enum GT for "GT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GU">
             <summary>
             Enum GU for "GU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GW">
             <summary>
             Enum GW for "GW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GY">
             <summary>
             Enum GY for "GY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.HK">
             <summary>
             Enum HK for "HK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.HM">
             <summary>
             Enum HM for "HM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.HN">
             <summary>
             Enum HN for "HN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.HR">
             <summary>
             Enum HR for "HR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.HT">
             <summary>
             Enum HT for "HT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.HU">
             <summary>
             Enum HU for "HU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.ID">
             <summary>
             Enum ID for "ID"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.IE">
             <summary>
             Enum IE for "IE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.IL">
             <summary>
             Enum IL for "IL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.IM">
             <summary>
             Enum IM for "IM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.IN">
             <summary>
             Enum IN for "IN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.IO">
             <summary>
             Enum IO for "IO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.IQ">
             <summary>
             Enum IQ for "IQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.IR">
             <summary>
             Enum IR for "IR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.IS">
             <summary>
             Enum IS for "IS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.IT">
             <summary>
             Enum IT for "IT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.JE">
             <summary>
             Enum JE for "JE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.JM">
             <summary>
             Enum JM for "JM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.JO">
             <summary>
             Enum JO for "JO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.JP">
             <summary>
             Enum JP for "JP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.KE">
             <summary>
             Enum KE for "KE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.KG">
             <summary>
             Enum KG for "KG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.KH">
             <summary>
             Enum KH for "KH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.KI">
             <summary>
             Enum KI for "KI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.KM">
             <summary>
             Enum KM for "KM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.KN">
             <summary>
             Enum KN for "KN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.KP">
             <summary>
             Enum KP for "KP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.KR">
             <summary>
             Enum KR for "KR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.KW">
             <summary>
             Enum KW for "KW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.KY">
             <summary>
             Enum KY for "KY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.KZ">
             <summary>
             Enum KZ for "KZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.LA">
             <summary>
             Enum LA for "LA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.LB">
             <summary>
             Enum LB for "LB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.LC">
             <summary>
             Enum LC for "LC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.LI">
             <summary>
             Enum LI for "LI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.LK">
             <summary>
             Enum LK for "LK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.LR">
             <summary>
             Enum LR for "LR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.LS">
             <summary>
             Enum LS for "LS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.LT">
             <summary>
             Enum LT for "LT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.LU">
             <summary>
             Enum LU for "LU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.LV">
             <summary>
             Enum LV for "LV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.LY">
             <summary>
             Enum LY for "LY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MA">
             <summary>
             Enum MA for "MA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MC">
             <summary>
             Enum MC for "MC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MD">
             <summary>
             Enum MD for "MD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.ME">
             <summary>
             Enum ME for "ME"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MF">
             <summary>
             Enum MF for "MF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MG">
             <summary>
             Enum MG for "MG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MH">
             <summary>
             Enum MH for "MH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MK">
             <summary>
             Enum MK for "MK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.ML">
             <summary>
             Enum ML for "ML"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MM">
             <summary>
             Enum MM for "MM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MN">
             <summary>
             Enum MN for "MN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MO">
             <summary>
             Enum MO for "MO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MP">
             <summary>
             Enum MP for "MP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MQ">
             <summary>
             Enum MQ for "MQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MR">
             <summary>
             Enum MR for "MR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MS">
             <summary>
             Enum MS for "MS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MT">
             <summary>
             Enum MT for "MT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MU">
             <summary>
             Enum MU for "MU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MV">
             <summary>
             Enum MV for "MV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MW">
             <summary>
             Enum MW for "MW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MX">
             <summary>
             Enum MX for "MX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MY">
             <summary>
             Enum MY for "MY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MZ">
             <summary>
             Enum MZ for "MZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.NA">
             <summary>
             Enum NA for "NA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.NC">
             <summary>
             Enum NC for "NC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.NE">
             <summary>
             Enum NE for "NE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.NF">
             <summary>
             Enum NF for "NF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.NG">
             <summary>
             Enum NG for "NG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.NI">
             <summary>
             Enum NI for "NI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.NL">
             <summary>
             Enum NL for "NL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.NO">
             <summary>
             Enum NO for "NO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.NP">
             <summary>
             Enum NP for "NP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.NR">
             <summary>
             Enum NR for "NR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.NU">
             <summary>
             Enum NU for "NU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.NZ">
             <summary>
             Enum NZ for "NZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.OM">
             <summary>
             Enum OM for "OM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PA">
             <summary>
             Enum PA for "PA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PE">
             <summary>
             Enum PE for "PE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PF">
             <summary>
             Enum PF for "PF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PG">
             <summary>
             Enum PG for "PG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PH">
             <summary>
             Enum PH for "PH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PK">
             <summary>
             Enum PK for "PK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PL">
             <summary>
             Enum PL for "PL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PM">
             <summary>
             Enum PM for "PM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PN">
             <summary>
             Enum PN for "PN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PR">
             <summary>
             Enum PR for "PR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PS">
             <summary>
             Enum PS for "PS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PT">
             <summary>
             Enum PT for "PT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PW">
             <summary>
             Enum PW for "PW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PY">
             <summary>
             Enum PY for "PY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.QA">
             <summary>
             Enum QA for "QA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.RE">
             <summary>
             Enum RE for "RE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.RO">
             <summary>
             Enum RO for "RO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.RS">
             <summary>
             Enum RS for "RS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.RU">
             <summary>
             Enum RU for "RU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.RW">
             <summary>
             Enum RW for "RW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SA">
             <summary>
             Enum SA for "SA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SB">
             <summary>
             Enum SB for "SB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SC">
             <summary>
             Enum SC for "SC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SD">
             <summary>
             Enum SD for "SD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SE">
             <summary>
             Enum SE for "SE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SG">
             <summary>
             Enum SG for "SG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SH">
             <summary>
             Enum SH for "SH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SI">
             <summary>
             Enum SI for "SI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SJ">
             <summary>
             Enum SJ for "SJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SK">
             <summary>
             Enum SK for "SK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SL">
             <summary>
             Enum SL for "SL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SM">
             <summary>
             Enum SM for "SM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SN">
             <summary>
             Enum SN for "SN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SO">
             <summary>
             Enum SO for "SO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SR">
             <summary>
             Enum SR for "SR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SS">
             <summary>
             Enum SS for "SS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.ST">
             <summary>
             Enum ST for "ST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SV">
             <summary>
             Enum SV for "SV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SX">
             <summary>
             Enum SX for "SX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SY">
             <summary>
             Enum SY for "SY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SZ">
             <summary>
             Enum SZ for "SZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TC">
             <summary>
             Enum TC for "TC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TD">
             <summary>
             Enum TD for "TD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TF">
             <summary>
             Enum TF for "TF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TG">
             <summary>
             Enum TG for "TG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TH">
             <summary>
             Enum TH for "TH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TJ">
             <summary>
             Enum TJ for "TJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TK">
             <summary>
             Enum TK for "TK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TL">
             <summary>
             Enum TL for "TL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TM">
             <summary>
             Enum TM for "TM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TN">
             <summary>
             Enum TN for "TN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TO">
             <summary>
             Enum TO for "TO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TR">
             <summary>
             Enum TR for "TR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TT">
             <summary>
             Enum TT for "TT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TV">
             <summary>
             Enum TV for "TV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TW">
             <summary>
             Enum TW for "TW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TZ">
             <summary>
             Enum TZ for "TZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.UA">
             <summary>
             Enum UA for "UA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.UG">
             <summary>
             Enum UG for "UG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.UM">
             <summary>
             Enum UM for "UM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.US">
             <summary>
             Enum US for "US"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.UY">
             <summary>
             Enum UY for "UY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.UZ">
             <summary>
             Enum UZ for "UZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.VA">
             <summary>
             Enum VA for "VA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.VC">
             <summary>
             Enum VC for "VC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.VE">
             <summary>
             Enum VE for "VE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.VG">
             <summary>
             Enum VG for "VG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.VI">
             <summary>
             Enum VI for "VI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.VN">
             <summary>
             Enum VN for "VN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.VU">
             <summary>
             Enum VU for "VU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.WF">
             <summary>
             Enum WF for "WF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.WS">
             <summary>
             Enum WS for "WS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.YE">
             <summary>
             Enum YE for "YE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.YT">
             <summary>
             Enum YT for "YT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.ZA">
             <summary>
             Enum ZA for "ZA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.ZM">
             <summary>
             Enum ZM for "ZM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.ZW">
             <summary>
             Enum ZW for "ZW"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.CreateCheckoutRequest">
             <summary>
             Defines the parameters that can be included in the body of a request to the [CreateCheckout](#endpoint-createcheckout) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateCheckoutRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCheckoutRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateCheckoutRequest.#ctor(System.String,Square.Connect.Model.CreateOrderRequestOrder,System.Nullable{System.Boolean},System.String,System.String,Square.Connect.Model.Address,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCheckoutRequest" /> class.
             </summary>
             <param name="IdempotencyKey">A unique string that identifies this checkout among others you've created. It can be any valid string but must be unique for every order sent to Square Checkout for a given location ID.  The idempotency key is used to avoid processing the same order more than once. If you're unsure whether a particular checkout was created successfully, you can reattempt it with the same idempotency key and all the same other parameters without worrying about creating duplicates.  We recommend using a random number/string generator native to the language you are working in to generate strings for your idempotency keys.  See [Idempotency keys](#idempotencykeys) for more information. (required).</param>
             <param name="Order">The order including line items to be checked out. (required).</param>
             <param name="AskForShippingAddress">If `true`, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default is `false`..</param>
             <param name="MerchantSupportEmail">The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant's Square account.  Default is unset..</param>
             <param name="PrePopulateBuyerEmail">If provided, the buyer's email is pre-populated on the checkout page as an editable text field.  Default is unset..</param>
             <param name="PrePopulateShippingAddress">If provided, the buyer's shipping info is pre-populated on the checkout page as editable text fields.  Default is unset..</param>
             <param name="RedirectUrl">The URL to redirect to after checkout is completed with `checkoutId`, Square's `orderId`, `transactionId`, and `referenceId` appended as URL parameters. For example, if the provided redirect_url is `http://www.example.com/order-complete`, a successful transaction redirects the customer to:  `http://www.example.com/order-complete?checkoutId=xxxxxx&amp;orderId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx`  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.  Default is unset..</param>
            </member>
        <member name="P:Square.Connect.Model.CreateCheckoutRequest.IdempotencyKey">
             <summary>
             A unique string that identifies this checkout among others you've created. It can be any valid string but must be unique for every order sent to Square Checkout for a given location ID.  The idempotency key is used to avoid processing the same order more than once. If you're unsure whether a particular checkout was created successfully, you can reattempt it with the same idempotency key and all the same other parameters without worrying about creating duplicates.  We recommend using a random number/string generator native to the language you are working in to generate strings for your idempotency keys.  See [Idempotency keys](#idempotencykeys) for more information.
             </summary>
             <value>A unique string that identifies this checkout among others you've created. It can be any valid string but must be unique for every order sent to Square Checkout for a given location ID.  The idempotency key is used to avoid processing the same order more than once. If you're unsure whether a particular checkout was created successfully, you can reattempt it with the same idempotency key and all the same other parameters without worrying about creating duplicates.  We recommend using a random number/string generator native to the language you are working in to generate strings for your idempotency keys.  See [Idempotency keys](#idempotencykeys) for more information.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCheckoutRequest.Order">
             <summary>
             The order including line items to be checked out.
             </summary>
             <value>The order including line items to be checked out.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCheckoutRequest.AskForShippingAddress">
             <summary>
             If `true`, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default is `false`.
             </summary>
             <value>If `true`, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default is `false`.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCheckoutRequest.MerchantSupportEmail">
             <summary>
             The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant's Square account.  Default is unset.
             </summary>
             <value>The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant's Square account.  Default is unset.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCheckoutRequest.PrePopulateBuyerEmail">
             <summary>
             If provided, the buyer's email is pre-populated on the checkout page as an editable text field.  Default is unset.
             </summary>
             <value>If provided, the buyer's email is pre-populated on the checkout page as an editable text field.  Default is unset.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCheckoutRequest.PrePopulateShippingAddress">
             <summary>
             If provided, the buyer's shipping info is pre-populated on the checkout page as editable text fields.  Default is unset.
             </summary>
             <value>If provided, the buyer's shipping info is pre-populated on the checkout page as editable text fields.  Default is unset.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCheckoutRequest.RedirectUrl">
             <summary>
             The URL to redirect to after checkout is completed with `checkoutId`, Square's `orderId`, `transactionId`, and `referenceId` appended as URL parameters. For example, if the provided redirect_url is `http://www.example.com/order-complete`, a successful transaction redirects the customer to:  `http://www.example.com/order-complete?checkoutId=xxxxxx&amp;orderId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx`  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.  Default is unset.
             </summary>
             <value>The URL to redirect to after checkout is completed with `checkoutId`, Square's `orderId`, `transactionId`, and `referenceId` appended as URL parameters. For example, if the provided redirect_url is `http://www.example.com/order-complete`, a successful transaction redirects the customer to:  `http://www.example.com/order-complete?checkoutId=xxxxxx&amp;orderId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx`  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.  Default is unset.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateCheckoutRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCheckoutRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCheckoutRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCheckoutRequest.Equals(Square.Connect.Model.CreateCheckoutRequest)">
             <summary>
             Returns true if CreateCheckoutRequest instances are equal
             </summary>
             <param name="other">Instance of CreateCheckoutRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCheckoutRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateCheckoutResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [CreateCheckout](#endpoint-createcheckout) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateCheckoutResponse.#ctor(Square.Connect.Model.Checkout,System.Collections.Generic.List{Square.Connect.Model.Error})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCheckoutResponse" /> class.
             </summary>
             <param name="Checkout">The newly created checkout. If the same request was made with the same idempotency_key, this will be the checkout created with the idempotency_key..</param>
             <param name="Errors">Any errors that occurred during the request..</param>
            </member>
        <member name="P:Square.Connect.Model.CreateCheckoutResponse.Checkout">
             <summary>
             The newly created checkout. If the same request was made with the same idempotency_key, this will be the checkout created with the idempotency_key.
             </summary>
             <value>The newly created checkout. If the same request was made with the same idempotency_key, this will be the checkout created with the idempotency_key.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCheckoutResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateCheckoutResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCheckoutResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCheckoutResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCheckoutResponse.Equals(Square.Connect.Model.CreateCheckoutResponse)">
             <summary>
             Returns true if CreateCheckoutResponse instances are equal
             </summary>
             <param name="other">Instance of CreateCheckoutResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCheckoutResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateCustomerCardRequest">
             <summary>
             Defines the fields that are included in the request body of a request to the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCustomerCardRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.#ctor(System.String,Square.Connect.Model.Address,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCustomerCardRequest" /> class.
             </summary>
             <param name="CardNonce">A card nonce representing the credit card to link to the customer.  Card nonces are generated by the `SqPaymentForm` that buyers enter their card information into. See [Embedding the payment form](/articles/adding-payment-form/) for more information. (required).</param>
             <param name="BillingAddress">Address information for the card on file. Only the `postal_code` field is required for payments in the US and Canada..</param>
             <param name="CardholderName">The cardholder's name..</param>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerCardRequest.CardNonce">
             <summary>
             A card nonce representing the credit card to link to the customer.  Card nonces are generated by the `SqPaymentForm` that buyers enter their card information into. See [Embedding the payment form](/articles/adding-payment-form/) for more information.
             </summary>
             <value>A card nonce representing the credit card to link to the customer.  Card nonces are generated by the `SqPaymentForm` that buyers enter their card information into. See [Embedding the payment form](/articles/adding-payment-form/) for more information.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerCardRequest.BillingAddress">
             <summary>
             Address information for the card on file. Only the `postal_code` field is required for payments in the US and Canada.
             </summary>
             <value>Address information for the card on file. Only the `postal_code` field is required for payments in the US and Canada.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerCardRequest.CardholderName">
             <summary>
             The cardholder's name.
             </summary>
             <value>The cardholder's name.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.Equals(Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             Returns true if CreateCustomerCardRequest instances are equal
             </summary>
             <param name="other">Instance of CreateCustomerCardRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateCustomerCardResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.  One of `errors` or `card` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Card)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCustomerCardResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Card">The created card on file..</param>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerCardResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerCardResponse.Card">
             <summary>
             The created card on file.
             </summary>
             <value>The created card on file.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardResponse.Equals(Square.Connect.Model.CreateCustomerCardResponse)">
             <summary>
             Returns true if CreateCustomerCardResponse instances are equal
             </summary>
             <param name="other">Instance of CreateCustomerCardResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateCustomerRequest">
             <summary>
             Defines the body parameters that can be provided in a request to the [CreateCustomer](#endpoint-createcustomer) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerRequest.#ctor(System.String,System.String,System.String,System.String,System.String,Square.Connect.Model.Address,System.String,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCustomerRequest" /> class.
             </summary>
             <param name="GivenName">The customer's given (i.e., first) name..</param>
             <param name="FamilyName">The customer's family (i.e., last) name..</param>
             <param name="CompanyName">The name of the customer's company..</param>
             <param name="Nickname">A nickname for the customer..</param>
             <param name="EmailAddress">The customer's email address..</param>
             <param name="Address">The customer's physical address..</param>
             <param name="PhoneNumber">The customer's phone number..</param>
             <param name="ReferenceId">An optional second ID you can set to associate the customer with an entity in another system..</param>
             <param name="Note">An optional note to associate with the customer..</param>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.GivenName">
             <summary>
             The customer's given (i.e., first) name.
             </summary>
             <value>The customer's given (i.e., first) name.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.FamilyName">
             <summary>
             The customer's family (i.e., last) name.
             </summary>
             <value>The customer's family (i.e., last) name.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.CompanyName">
             <summary>
             The name of the customer's company.
             </summary>
             <value>The name of the customer's company.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.Nickname">
             <summary>
             A nickname for the customer.
             </summary>
             <value>A nickname for the customer.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.EmailAddress">
             <summary>
             The customer's email address.
             </summary>
             <value>The customer's email address.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.Address">
             <summary>
             The customer's physical address.
             </summary>
             <value>The customer's physical address.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.PhoneNumber">
             <summary>
             The customer's phone number.
             </summary>
             <value>The customer's phone number.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.ReferenceId">
             <summary>
             An optional second ID you can set to associate the customer with an entity in another system.
             </summary>
             <value>An optional second ID you can set to associate the customer with an entity in another system.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.Note">
             <summary>
             An optional note to associate with the customer.
             </summary>
             <value>An optional note to associate with the customer.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerRequest.Equals(Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             Returns true if CreateCustomerRequest instances are equal
             </summary>
             <param name="other">Instance of CreateCustomerRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateCustomerResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [CreateCustomer](#endpoint-createcustomer) endpoint.  One of `errors` or `customer` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Customer)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCustomerResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Customer">The created customer..</param>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerResponse.Customer">
             <summary>
             The created customer.
             </summary>
             <value>The created customer.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerResponse.Equals(Square.Connect.Model.CreateCustomerResponse)">
             <summary>
             Returns true if CreateCustomerResponse instances are equal
             </summary>
             <param name="other">Instance of CreateCustomerResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateOrderRequest">
             <summary>
             Defines the parameters that can be included in the body of a request to the [CreateOrder](#endpoint-createorder) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateOrderRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequest.#ctor(System.String,Square.Connect.Model.Order)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateOrderRequest" /> class.
             </summary>
             <param name="IdempotencyKey">A value you specify that uniquely identifies this order among orders you've created.  If you're unsure whether a particular order was created successfully, you can reattempt it with the same idempotency key without worrying about creating duplicate orders.  See [Idempotency keys](#idempotencykeys) for more information. (required).</param>
             <param name="Order">The order to be created. (required).</param>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequest.IdempotencyKey">
             <summary>
             A value you specify that uniquely identifies this order among orders you've created.  If you're unsure whether a particular order was created successfully, you can reattempt it with the same idempotency key without worrying about creating duplicate orders.  See [Idempotency keys](#idempotencykeys) for more information.
             </summary>
             <value>A value you specify that uniquely identifies this order among orders you've created.  If you're unsure whether a particular order was created successfully, you can reattempt it with the same idempotency key without worrying about creating duplicate orders.  See [Idempotency keys](#idempotencykeys) for more information.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequest.Order">
             <summary>
             The order to be created.
             </summary>
             <value>The order to be created.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequest.Equals(Square.Connect.Model.CreateOrderRequest)">
             <summary>
             Returns true if CreateOrderRequest instances are equal
             </summary>
             <param name="other">Instance of CreateOrderRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateOrderRequestLineItem">
             <summary>
             Represents a line item to include in an order. Each line item describes a different product to purchase, with its own quantity and price details.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestLineItem.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateOrderRequestLineItem" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestLineItem.#ctor(System.String,System.String,Square.Connect.Model.Money)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateOrderRequestLineItem" /> class.
             </summary>
             <param name="Name">The name of the line item. This value cannot exceed 500 characters. (required).</param>
             <param name="Quantity">The quantity to purchase, as a string representation of a number. Currently, only integer values are supported. (required).</param>
             <param name="BasePriceMoney">The base price for a single unit of the line item's associated variation. If a line item represents a Custom Amount instead of a particular product, this field indicates that amount. (required).</param>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestLineItem.Name">
             <summary>
             The name of the line item. This value cannot exceed 500 characters.
             </summary>
             <value>The name of the line item. This value cannot exceed 500 characters.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestLineItem.Quantity">
             <summary>
             The quantity to purchase, as a string representation of a number. Currently, only integer values are supported.
             </summary>
             <value>The quantity to purchase, as a string representation of a number. Currently, only integer values are supported.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestLineItem.BasePriceMoney">
             <summary>
             The base price for a single unit of the line item's associated variation. If a line item represents a Custom Amount instead of a particular product, this field indicates that amount.
             </summary>
             <value>The base price for a single unit of the line item's associated variation. If a line item represents a Custom Amount instead of a particular product, this field indicates that amount.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestLineItem.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestLineItem.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestLineItem.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestLineItem.Equals(Square.Connect.Model.CreateOrderRequestLineItem)">
             <summary>
             Returns true if CreateOrderRequestLineItem instances are equal
             </summary>
             <param name="other">Instance of CreateOrderRequestLineItem to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestLineItem.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateOrderRequestOrder">
             <summary>
             The object describes the order.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestOrder.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateOrderRequestOrder" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestOrder.#ctor(System.String,System.Collections.Generic.List{Square.Connect.Model.CreateOrderRequestLineItem})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateOrderRequestOrder" /> class.
             </summary>
             <param name="ReferenceId">An optional ID you can associate with the order for your own purposes (such as to associate the order with an entity ID in your own database).  This value cannot exceed 40 characters..</param>
             <param name="LineItems">The line items to associate with this order.  Each line item represents a different product (or a custom monetary amount) to include in a purchase. (required).</param>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestOrder.ReferenceId">
             <summary>
             An optional ID you can associate with the order for your own purposes (such as to associate the order with an entity ID in your own database).  This value cannot exceed 40 characters.
             </summary>
             <value>An optional ID you can associate with the order for your own purposes (such as to associate the order with an entity ID in your own database).  This value cannot exceed 40 characters.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestOrder.LineItems">
             <summary>
             The line items to associate with this order.  Each line item represents a different product (or a custom monetary amount) to include in a purchase.
             </summary>
             <value>The line items to associate with this order.  Each line item represents a different product (or a custom monetary amount) to include in a purchase.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestOrder.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestOrder.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestOrder.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestOrder.Equals(Square.Connect.Model.CreateOrderRequestOrder)">
             <summary>
             Returns true if CreateOrderRequestOrder instances are equal
             </summary>
             <param name="other">Instance of CreateOrderRequestOrder to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestOrder.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateRefundRequest">
             <summary>
             Defines the body parameters that can be included in a request to the [CreateRefund](#endpoint-createrefund) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateRefundRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.#ctor(System.String,System.String,System.String,Square.Connect.Model.Money)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateRefundRequest" /> class.
             </summary>
             <param name="IdempotencyKey">A value you specify that uniquely identifies this refund among refunds you've created for the tender.  If you're unsure whether a particular refund succeeded, you can reattempt it with the same idempotency key without worrying about duplicating the refund.  See [Idempotency keys](#idempotencykeys) for more information. (required).</param>
             <param name="TenderId">The ID of the tender to refund.  A [`Transaction`](#type-transaction) has one or more `tenders` (i.e., methods of payment) associated with it, and you refund each tender separately with the Connect API. (required).</param>
             <param name="Reason">A description of the reason for the refund.  Default value: `Refund via API`.</param>
             <param name="AmountMoney">The amount of money to refund.  Note that you specify the amount in the __smallest denomination of the applicable currency__. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](#workingwithmonetaryamounts) for details.  This amount cannot exceed the amount that was originally charged to the tender that corresponds to `tender_id`. (required).</param>
            </member>
        <member name="P:Square.Connect.Model.CreateRefundRequest.IdempotencyKey">
             <summary>
             A value you specify that uniquely identifies this refund among refunds you've created for the tender.  If you're unsure whether a particular refund succeeded, you can reattempt it with the same idempotency key without worrying about duplicating the refund.  See [Idempotency keys](#idempotencykeys) for more information.
             </summary>
             <value>A value you specify that uniquely identifies this refund among refunds you've created for the tender.  If you're unsure whether a particular refund succeeded, you can reattempt it with the same idempotency key without worrying about duplicating the refund.  See [Idempotency keys](#idempotencykeys) for more information.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateRefundRequest.TenderId">
             <summary>
             The ID of the tender to refund.  A [`Transaction`](#type-transaction) has one or more `tenders` (i.e., methods of payment) associated with it, and you refund each tender separately with the Connect API.
             </summary>
             <value>The ID of the tender to refund.  A [`Transaction`](#type-transaction) has one or more `tenders` (i.e., methods of payment) associated with it, and you refund each tender separately with the Connect API.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateRefundRequest.Reason">
             <summary>
             A description of the reason for the refund.  Default value: `Refund via API`
             </summary>
             <value>A description of the reason for the refund.  Default value: `Refund via API`</value>
            </member>
        <member name="P:Square.Connect.Model.CreateRefundRequest.AmountMoney">
             <summary>
             The amount of money to refund.  Note that you specify the amount in the __smallest denomination of the applicable currency__. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](#workingwithmonetaryamounts) for details.  This amount cannot exceed the amount that was originally charged to the tender that corresponds to `tender_id`.
             </summary>
             <value>The amount of money to refund.  Note that you specify the amount in the __smallest denomination of the applicable currency__. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](#workingwithmonetaryamounts) for details.  This amount cannot exceed the amount that was originally charged to the tender that corresponds to `tender_id`.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.Equals(Square.Connect.Model.CreateRefundRequest)">
             <summary>
             Returns true if CreateRefundRequest instances are equal
             </summary>
             <param name="other">Instance of CreateRefundRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateRefundResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [CreateRefund](#endpoint-createrefund) endpoint.  One of `errors` or `refund` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Refund)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateRefundResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Refund">The created refund..</param>
            </member>
        <member name="P:Square.Connect.Model.CreateRefundResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateRefundResponse.Refund">
             <summary>
             The created refund.
             </summary>
             <value>The created refund.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundResponse.Equals(Square.Connect.Model.CreateRefundResponse)">
             <summary>
             Returns true if CreateRefundResponse instances are equal
             </summary>
             <param name="other">Instance of CreateRefundResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.Currency">
             <summary>
             Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).
             </summary>
             <value>Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).</value>
            </member>
        <member name="F:Square.Connect.Model.Currency.AED">
             <summary>
             Enum AED for "AED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.AFN">
             <summary>
             Enum AFN for "AFN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.ALL">
             <summary>
             Enum ALL for "ALL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.AMD">
             <summary>
             Enum AMD for "AMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.ANG">
             <summary>
             Enum ANG for "ANG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.AOA">
             <summary>
             Enum AOA for "AOA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.ARS">
             <summary>
             Enum ARS for "ARS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.AUD">
             <summary>
             Enum AUD for "AUD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.AWG">
             <summary>
             Enum AWG for "AWG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.AZN">
             <summary>
             Enum AZN for "AZN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BAM">
             <summary>
             Enum BAM for "BAM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BBD">
             <summary>
             Enum BBD for "BBD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BDT">
             <summary>
             Enum BDT for "BDT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BGN">
             <summary>
             Enum BGN for "BGN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BHD">
             <summary>
             Enum BHD for "BHD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BIF">
             <summary>
             Enum BIF for "BIF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BMD">
             <summary>
             Enum BMD for "BMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BND">
             <summary>
             Enum BND for "BND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BOB">
             <summary>
             Enum BOB for "BOB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BOV">
             <summary>
             Enum BOV for "BOV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BRL">
             <summary>
             Enum BRL for "BRL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BSD">
             <summary>
             Enum BSD for "BSD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BTN">
             <summary>
             Enum BTN for "BTN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BWP">
             <summary>
             Enum BWP for "BWP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BYR">
             <summary>
             Enum BYR for "BYR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BZD">
             <summary>
             Enum BZD for "BZD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.CAD">
             <summary>
             Enum CAD for "CAD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.CDF">
             <summary>
             Enum CDF for "CDF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.CHE">
             <summary>
             Enum CHE for "CHE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.CHF">
             <summary>
             Enum CHF for "CHF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.CHW">
             <summary>
             Enum CHW for "CHW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.CLF">
             <summary>
             Enum CLF for "CLF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.CLP">
             <summary>
             Enum CLP for "CLP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.CNY">
             <summary>
             Enum CNY for "CNY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.COP">
             <summary>
             Enum COP for "COP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.COU">
             <summary>
             Enum COU for "COU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.CRC">
             <summary>
             Enum CRC for "CRC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.CUC">
             <summary>
             Enum CUC for "CUC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.CUP">
             <summary>
             Enum CUP for "CUP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.CVE">
             <summary>
             Enum CVE for "CVE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.CZK">
             <summary>
             Enum CZK for "CZK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.DJF">
             <summary>
             Enum DJF for "DJF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.DKK">
             <summary>
             Enum DKK for "DKK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.DOP">
             <summary>
             Enum DOP for "DOP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.DZD">
             <summary>
             Enum DZD for "DZD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.EGP">
             <summary>
             Enum EGP for "EGP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.ERN">
             <summary>
             Enum ERN for "ERN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.ETB">
             <summary>
             Enum ETB for "ETB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.EUR">
             <summary>
             Enum EUR for "EUR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.FJD">
             <summary>
             Enum FJD for "FJD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.FKP">
             <summary>
             Enum FKP for "FKP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.GBP">
             <summary>
             Enum GBP for "GBP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.GEL">
             <summary>
             Enum GEL for "GEL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.GHS">
             <summary>
             Enum GHS for "GHS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.GIP">
             <summary>
             Enum GIP for "GIP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.GMD">
             <summary>
             Enum GMD for "GMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.GNF">
             <summary>
             Enum GNF for "GNF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.GTQ">
             <summary>
             Enum GTQ for "GTQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.GYD">
             <summary>
             Enum GYD for "GYD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.HKD">
             <summary>
             Enum HKD for "HKD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.HNL">
             <summary>
             Enum HNL for "HNL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.HRK">
             <summary>
             Enum HRK for "HRK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.HTG">
             <summary>
             Enum HTG for "HTG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.HUF">
             <summary>
             Enum HUF for "HUF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.IDR">
             <summary>
             Enum IDR for "IDR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.ILS">
             <summary>
             Enum ILS for "ILS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.INR">
             <summary>
             Enum INR for "INR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.IQD">
             <summary>
             Enum IQD for "IQD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.IRR">
             <summary>
             Enum IRR for "IRR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.ISK">
             <summary>
             Enum ISK for "ISK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.JMD">
             <summary>
             Enum JMD for "JMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.JOD">
             <summary>
             Enum JOD for "JOD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.JPY">
             <summary>
             Enum JPY for "JPY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.KES">
             <summary>
             Enum KES for "KES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.KGS">
             <summary>
             Enum KGS for "KGS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.KHR">
             <summary>
             Enum KHR for "KHR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.KMF">
             <summary>
             Enum KMF for "KMF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.KPW">
             <summary>
             Enum KPW for "KPW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.KRW">
             <summary>
             Enum KRW for "KRW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.KWD">
             <summary>
             Enum KWD for "KWD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.KYD">
             <summary>
             Enum KYD for "KYD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.KZT">
             <summary>
             Enum KZT for "KZT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.LAK">
             <summary>
             Enum LAK for "LAK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.LBP">
             <summary>
             Enum LBP for "LBP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.LKR">
             <summary>
             Enum LKR for "LKR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.LRD">
             <summary>
             Enum LRD for "LRD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.LSL">
             <summary>
             Enum LSL for "LSL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.LTL">
             <summary>
             Enum LTL for "LTL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.LVL">
             <summary>
             Enum LVL for "LVL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.LYD">
             <summary>
             Enum LYD for "LYD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MAD">
             <summary>
             Enum MAD for "MAD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MDL">
             <summary>
             Enum MDL for "MDL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MGA">
             <summary>
             Enum MGA for "MGA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MKD">
             <summary>
             Enum MKD for "MKD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MMK">
             <summary>
             Enum MMK for "MMK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MNT">
             <summary>
             Enum MNT for "MNT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MOP">
             <summary>
             Enum MOP for "MOP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MRO">
             <summary>
             Enum MRO for "MRO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MUR">
             <summary>
             Enum MUR for "MUR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MVR">
             <summary>
             Enum MVR for "MVR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MWK">
             <summary>
             Enum MWK for "MWK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MXN">
             <summary>
             Enum MXN for "MXN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MXV">
             <summary>
             Enum MXV for "MXV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MYR">
             <summary>
             Enum MYR for "MYR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MZN">
             <summary>
             Enum MZN for "MZN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.NAD">
             <summary>
             Enum NAD for "NAD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.NGN">
             <summary>
             Enum NGN for "NGN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.NIO">
             <summary>
             Enum NIO for "NIO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.NOK">
             <summary>
             Enum NOK for "NOK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.NPR">
             <summary>
             Enum NPR for "NPR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.NZD">
             <summary>
             Enum NZD for "NZD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.OMR">
             <summary>
             Enum OMR for "OMR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.PAB">
             <summary>
             Enum PAB for "PAB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.PEN">
             <summary>
             Enum PEN for "PEN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.PGK">
             <summary>
             Enum PGK for "PGK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.PHP">
             <summary>
             Enum PHP for "PHP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.PKR">
             <summary>
             Enum PKR for "PKR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.PLN">
             <summary>
             Enum PLN for "PLN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.PYG">
             <summary>
             Enum PYG for "PYG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.QAR">
             <summary>
             Enum QAR for "QAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.RON">
             <summary>
             Enum RON for "RON"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.RSD">
             <summary>
             Enum RSD for "RSD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.RUB">
             <summary>
             Enum RUB for "RUB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.RWF">
             <summary>
             Enum RWF for "RWF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SAR">
             <summary>
             Enum SAR for "SAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SBD">
             <summary>
             Enum SBD for "SBD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SCR">
             <summary>
             Enum SCR for "SCR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SDG">
             <summary>
             Enum SDG for "SDG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SEK">
             <summary>
             Enum SEK for "SEK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SGD">
             <summary>
             Enum SGD for "SGD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SHP">
             <summary>
             Enum SHP for "SHP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SLL">
             <summary>
             Enum SLL for "SLL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SOS">
             <summary>
             Enum SOS for "SOS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SRD">
             <summary>
             Enum SRD for "SRD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SSP">
             <summary>
             Enum SSP for "SSP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.STD">
             <summary>
             Enum STD for "STD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SVC">
             <summary>
             Enum SVC for "SVC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SYP">
             <summary>
             Enum SYP for "SYP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SZL">
             <summary>
             Enum SZL for "SZL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.THB">
             <summary>
             Enum THB for "THB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.TJS">
             <summary>
             Enum TJS for "TJS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.TMT">
             <summary>
             Enum TMT for "TMT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.TND">
             <summary>
             Enum TND for "TND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.TOP">
             <summary>
             Enum TOP for "TOP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.TRY">
             <summary>
             Enum TRY for "TRY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.TTD">
             <summary>
             Enum TTD for "TTD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.TWD">
             <summary>
             Enum TWD for "TWD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.TZS">
             <summary>
             Enum TZS for "TZS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.UAH">
             <summary>
             Enum UAH for "UAH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.UGX">
             <summary>
             Enum UGX for "UGX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.USD">
             <summary>
             Enum USD for "USD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.USN">
             <summary>
             Enum USN for "USN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.USS">
             <summary>
             Enum USS for "USS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.UYI">
             <summary>
             Enum UYI for "UYI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.UYU">
             <summary>
             Enum UYU for "UYU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.UZS">
             <summary>
             Enum UZS for "UZS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.VEF">
             <summary>
             Enum VEF for "VEF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.VND">
             <summary>
             Enum VND for "VND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.VUV">
             <summary>
             Enum VUV for "VUV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.WST">
             <summary>
             Enum WST for "WST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XAF">
             <summary>
             Enum XAF for "XAF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XAG">
             <summary>
             Enum XAG for "XAG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XAU">
             <summary>
             Enum XAU for "XAU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XBA">
             <summary>
             Enum XBA for "XBA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XBB">
             <summary>
             Enum XBB for "XBB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XBC">
             <summary>
             Enum XBC for "XBC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XBD">
             <summary>
             Enum XBD for "XBD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XCD">
             <summary>
             Enum XCD for "XCD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XDR">
             <summary>
             Enum XDR for "XDR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XOF">
             <summary>
             Enum XOF for "XOF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XPD">
             <summary>
             Enum XPD for "XPD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XPF">
             <summary>
             Enum XPF for "XPF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XPT">
             <summary>
             Enum XPT for "XPT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XTS">
             <summary>
             Enum XTS for "XTS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XXX">
             <summary>
             Enum XXX for "XXX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.YER">
             <summary>
             Enum YER for "YER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.ZAR">
             <summary>
             Enum ZAR for "ZAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.ZMK">
             <summary>
             Enum ZMK for "ZMK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.ZMW">
             <summary>
             Enum ZMW for "ZMW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BTC">
             <summary>
             Enum BTC for "BTC"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Customer">
             <summary>
             Represents one of a business's customers, which can have one or more cards on file associated with it.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.Customer.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Customer" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.Customer.#ctor(System.String,System.String,System.String,System.Collections.Generic.List{Square.Connect.Model.Card},System.String,System.String,System.String,System.String,System.String,Square.Connect.Model.Address,System.String,System.String,System.String,Square.Connect.Model.CustomerPreferences,System.Collections.Generic.List{Square.Connect.Model.CustomerGroupInfo})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Customer" /> class.
             </summary>
             <param name="Id">The customer's unique ID. (required).</param>
             <param name="CreatedAt">The time when the customer was created, in RFC 3339 format. (required).</param>
             <param name="UpdatedAt">The time when the customer was last updated, in RFC 3339 format. (required).</param>
             <param name="Cards">The non-confidential details of the customer's cards on file..</param>
             <param name="GivenName">The customer's given (i.e., first) name..</param>
             <param name="FamilyName">The customer's family (i.e., last) name..</param>
             <param name="Nickname">The customer's nickname..</param>
             <param name="CompanyName">The name of the customer's company..</param>
             <param name="EmailAddress">The customer's email address..</param>
             <param name="Address">The customer's physical address..</param>
             <param name="PhoneNumber">The customer's phone number..</param>
             <param name="ReferenceId">A second ID you can set to associate the customer with an entity in another system..</param>
             <param name="Note">A note to associate with the customer..</param>
             <param name="Preferences">The customer's preferences..</param>
             <param name="Groups">The groups the customer belongs to..</param>
            </member>
        <member name="P:Square.Connect.Model.Customer.Id">
             <summary>
             The customer's unique ID.
             </summary>
             <value>The customer's unique ID.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.CreatedAt">
             <summary>
             The time when the customer was created, in RFC 3339 format.
             </summary>
             <value>The time when the customer was created, in RFC 3339 format.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.UpdatedAt">
             <summary>
             The time when the customer was last updated, in RFC 3339 format.
             </summary>
             <value>The time when the customer was last updated, in RFC 3339 format.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.Cards">
             <summary>
             The non-confidential details of the customer's cards on file.
             </summary>
             <value>The non-confidential details of the customer's cards on file.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.GivenName">
             <summary>
             The customer's given (i.e., first) name.
             </summary>
             <value>The customer's given (i.e., first) name.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.FamilyName">
             <summary>
             The customer's family (i.e., last) name.
             </summary>
             <value>The customer's family (i.e., last) name.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.Nickname">
             <summary>
             The customer's nickname.
             </summary>
             <value>The customer's nickname.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.CompanyName">
             <summary>
             The name of the customer's company.
             </summary>
             <value>The name of the customer's company.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.EmailAddress">
             <summary>
             The customer's email address.
             </summary>
             <value>The customer's email address.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.Address">
             <summary>
             The customer's physical address.
             </summary>
             <value>The customer's physical address.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.PhoneNumber">
             <summary>
             The customer's phone number.
             </summary>
             <value>The customer's phone number.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.ReferenceId">
             <summary>
             A second ID you can set to associate the customer with an entity in another system.
             </summary>
             <value>A second ID you can set to associate the customer with an entity in another system.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.Note">
             <summary>
             A note to associate with the customer.
             </summary>
             <value>A note to associate with the customer.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.Preferences">
             <summary>
             The customer's preferences.
             </summary>
             <value>The customer's preferences.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.Groups">
             <summary>
             The groups the customer belongs to.
             </summary>
             <value>The groups the customer belongs to.</value>
            </member>
        <member name="M:Square.Connect.Model.Customer.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Customer.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Customer.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Customer.Equals(Square.Connect.Model.Customer)">
             <summary>
             Returns true if Customer instances are equal
             </summary>
             <param name="other">Instance of Customer to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Customer.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CustomerGroupInfo">
             <summary>
             Contains some brief information about a customer group with its identifier included.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CustomerGroupInfo.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CustomerGroupInfo" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CustomerGroupInfo.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CustomerGroupInfo" /> class.
             </summary>
             <param name="Id">The ID of the customer group. (required).</param>
             <param name="Name">The name of the customer group. (required).</param>
            </member>
        <member name="P:Square.Connect.Model.CustomerGroupInfo.Id">
             <summary>
             The ID of the customer group.
             </summary>
             <value>The ID of the customer group.</value>
            </member>
        <member name="P:Square.Connect.Model.CustomerGroupInfo.Name">
             <summary>
             The name of the customer group.
             </summary>
             <value>The name of the customer group.</value>
            </member>
        <member name="M:Square.Connect.Model.CustomerGroupInfo.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CustomerGroupInfo.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CustomerGroupInfo.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CustomerGroupInfo.Equals(Square.Connect.Model.CustomerGroupInfo)">
             <summary>
             Returns true if CustomerGroupInfo instances are equal
             </summary>
             <param name="other">Instance of CustomerGroupInfo to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CustomerGroupInfo.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CustomerPreferences">
             <summary>
             Represents a particular customer's preferences.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CustomerPreferences.#ctor(System.Nullable{System.Boolean})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CustomerPreferences" /> class.
             </summary>
             <param name="EmailUnsubscribed">The customer has unsubscribed from receiving marketing campaign emails..</param>
            </member>
        <member name="P:Square.Connect.Model.CustomerPreferences.EmailUnsubscribed">
             <summary>
             The customer has unsubscribed from receiving marketing campaign emails.
             </summary>
             <value>The customer has unsubscribed from receiving marketing campaign emails.</value>
            </member>
        <member name="M:Square.Connect.Model.CustomerPreferences.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CustomerPreferences.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CustomerPreferences.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CustomerPreferences.Equals(Square.Connect.Model.CustomerPreferences)">
             <summary>
             Returns true if CustomerPreferences instances are equal
             </summary>
             <param name="other">Instance of CustomerPreferences to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CustomerPreferences.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.DeleteCustomerCardRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.DeleteCustomerCardRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardRequest.Equals(Square.Connect.Model.DeleteCustomerCardRequest)">
             <summary>
             Returns true if DeleteCustomerCardRequest instances are equal
             </summary>
             <param name="other">Instance of DeleteCustomerCardRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.DeleteCustomerCardResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [DeleteCustomerCard](#endpoint-deletecustomercard) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.DeleteCustomerCardResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
            </member>
        <member name="P:Square.Connect.Model.DeleteCustomerCardResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardResponse.Equals(Square.Connect.Model.DeleteCustomerCardResponse)">
             <summary>
             Returns true if DeleteCustomerCardResponse instances are equal
             </summary>
             <param name="other">Instance of DeleteCustomerCardResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.DeleteCustomerRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.DeleteCustomerRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerRequest.Equals(Square.Connect.Model.DeleteCustomerRequest)">
             <summary>
             Returns true if DeleteCustomerRequest instances are equal
             </summary>
             <param name="other">Instance of DeleteCustomerRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.DeleteCustomerResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [DeleteCustomer](#endpoint-deletecustomer) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.DeleteCustomerResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
            </member>
        <member name="P:Square.Connect.Model.DeleteCustomerResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerResponse.Equals(Square.Connect.Model.DeleteCustomerResponse)">
             <summary>
             Returns true if DeleteCustomerResponse instances are equal
             </summary>
             <param name="other">Instance of DeleteCustomerResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.Error">
             <summary>
             Represents an error encountered during a request to the Connect API.  See [Handling errors](#handlingerrors) for more information.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Error.CategoryEnum">
             <summary>
             The error's high-level category. See [ErrorCategory](#type-errorcategory) for possible values.
             </summary>
             <value>The error's high-level category. See [ErrorCategory](#type-errorcategory) for possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.Error.CategoryEnum.APIERROR">
             <summary>
             Enum APIERROR for "API_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CategoryEnum.AUTHENTICATIONERROR">
             <summary>
             Enum AUTHENTICATIONERROR for "AUTHENTICATION_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CategoryEnum.INVALIDREQUESTERROR">
             <summary>
             Enum INVALIDREQUESTERROR for "INVALID_REQUEST_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CategoryEnum.RATELIMITERROR">
             <summary>
             Enum RATELIMITERROR for "RATE_LIMIT_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CategoryEnum.PAYMENTMETHODERROR">
             <summary>
             Enum PAYMENTMETHODERROR for "PAYMENT_METHOD_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CategoryEnum.REFUNDERROR">
             <summary>
             Enum REFUNDERROR for "REFUND_ERROR"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Error.CodeEnum">
             <summary>
             The error's specific code. See [ErrorCode](#type-errorcode) for possible values
             </summary>
             <value>The error's specific code. See [ErrorCode](#type-errorcode) for possible values</value>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INTERNALSERVERERROR">
             <summary>
             Enum INTERNALSERVERERROR for "INTERNAL_SERVER_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.UNAUTHORIZED">
             <summary>
             Enum UNAUTHORIZED for "UNAUTHORIZED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ACCESSTOKENEXPIRED">
             <summary>
             Enum ACCESSTOKENEXPIRED for "ACCESS_TOKEN_EXPIRED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ACCESSTOKENREVOKED">
             <summary>
             Enum ACCESSTOKENREVOKED for "ACCESS_TOKEN_REVOKED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.FORBIDDEN">
             <summary>
             Enum FORBIDDEN for "FORBIDDEN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INSUFFICIENTSCOPES">
             <summary>
             Enum INSUFFICIENTSCOPES for "INSUFFICIENT_SCOPES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.APPLICATIONDISABLED">
             <summary>
             Enum APPLICATIONDISABLED for "APPLICATION_DISABLED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.V1APPLICATION">
             <summary>
             Enum V1APPLICATION for "V1_APPLICATION"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.V1ACCESSTOKEN">
             <summary>
             Enum V1ACCESSTOKEN for "V1_ACCESS_TOKEN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CARDPROCESSINGNOTENABLED">
             <summary>
             Enum CARDPROCESSINGNOTENABLED for "CARD_PROCESSING_NOT_ENABLED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.BADREQUEST">
             <summary>
             Enum BADREQUEST for "BAD_REQUEST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.MISSINGREQUIREDPARAMETER">
             <summary>
             Enum MISSINGREQUIREDPARAMETER for "MISSING_REQUIRED_PARAMETER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INCORRECTTYPE">
             <summary>
             Enum INCORRECTTYPE for "INCORRECT_TYPE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDTIME">
             <summary>
             Enum INVALIDTIME for "INVALID_TIME"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDTIMERANGE">
             <summary>
             Enum INVALIDTIMERANGE for "INVALID_TIME_RANGE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDVALUE">
             <summary>
             Enum INVALIDVALUE for "INVALID_VALUE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDCURSOR">
             <summary>
             Enum INVALIDCURSOR for "INVALID_CURSOR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.UNKNOWNQUERYPARAMETER">
             <summary>
             Enum UNKNOWNQUERYPARAMETER for "UNKNOWN_QUERY_PARAMETER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CONFLICTINGPARAMETERS">
             <summary>
             Enum CONFLICTINGPARAMETERS for "CONFLICTING_PARAMETERS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.EXPECTEDJSONBODY">
             <summary>
             Enum EXPECTEDJSONBODY for "EXPECTED_JSON_BODY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDSORTORDER">
             <summary>
             Enum INVALIDSORTORDER for "INVALID_SORT_ORDER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.VALUEREGEXMISMATCH">
             <summary>
             Enum VALUEREGEXMISMATCH for "VALUE_REGEX_MISMATCH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.VALUETOOSHORT">
             <summary>
             Enum VALUETOOSHORT for "VALUE_TOO_SHORT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.VALUETOOLONG">
             <summary>
             Enum VALUETOOLONG for "VALUE_TOO_LONG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.VALUETOOLOW">
             <summary>
             Enum VALUETOOLOW for "VALUE_TOO_LOW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.VALUETOOHIGH">
             <summary>
             Enum VALUETOOHIGH for "VALUE_TOO_HIGH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.VALUEEMPTY">
             <summary>
             Enum VALUEEMPTY for "VALUE_EMPTY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ARRAYEMPTY">
             <summary>
             Enum ARRAYEMPTY for "ARRAY_EMPTY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.EXPECTEDBOOLEAN">
             <summary>
             Enum EXPECTEDBOOLEAN for "EXPECTED_BOOLEAN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.EXPECTEDINTEGER">
             <summary>
             Enum EXPECTEDINTEGER for "EXPECTED_INTEGER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.EXPECTEDFLOAT">
             <summary>
             Enum EXPECTEDFLOAT for "EXPECTED_FLOAT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.EXPECTEDSTRING">
             <summary>
             Enum EXPECTEDSTRING for "EXPECTED_STRING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.EXPECTEDOBJECT">
             <summary>
             Enum EXPECTEDOBJECT for "EXPECTED_OBJECT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.EXPECTEDARRAY">
             <summary>
             Enum EXPECTEDARRAY for "EXPECTED_ARRAY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.EXPECTEDBASE64ENCODEDBYTEARRAY">
             <summary>
             Enum EXPECTEDBASE64ENCODEDBYTEARRAY for "EXPECTED_BASE64_ENCODED_BYTE_ARRAY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDARRAYVALUE">
             <summary>
             Enum INVALIDARRAYVALUE for "INVALID_ARRAY_VALUE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDENUMVALUE">
             <summary>
             Enum INVALIDENUMVALUE for "INVALID_ENUM_VALUE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDCONTENTTYPE">
             <summary>
             Enum INVALIDCONTENTTYPE for "INVALID_CONTENT_TYPE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDFORMVALUE">
             <summary>
             Enum INVALIDFORMVALUE for "INVALID_FORM_VALUE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ONEINSTRUMENTEXPECTED">
             <summary>
             Enum ONEINSTRUMENTEXPECTED for "ONE_INSTRUMENT_EXPECTED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.NOFIELDSSET">
             <summary>
             Enum NOFIELDSSET for "NO_FIELDS_SET"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CARDEXPIRED">
             <summary>
             Enum CARDEXPIRED for "CARD_EXPIRED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDEXPIRATION">
             <summary>
             Enum INVALIDEXPIRATION for "INVALID_EXPIRATION"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDEXPIRATIONYEAR">
             <summary>
             Enum INVALIDEXPIRATIONYEAR for "INVALID_EXPIRATION_YEAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDEXPIRATIONDATE">
             <summary>
             Enum INVALIDEXPIRATIONDATE for "INVALID_EXPIRATION_DATE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.UNSUPPORTEDCARDBRAND">
             <summary>
             Enum UNSUPPORTEDCARDBRAND for "UNSUPPORTED_CARD_BRAND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDCARD">
             <summary>
             Enum INVALIDCARD for "INVALID_CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.DELAYEDTRANSACTIONEXPIRED">
             <summary>
             Enum DELAYEDTRANSACTIONEXPIRED for "DELAYED_TRANSACTION_EXPIRED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.DELAYEDTRANSACTIONCANCELED">
             <summary>
             Enum DELAYEDTRANSACTIONCANCELED for "DELAYED_TRANSACTION_CANCELED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.DELAYEDTRANSACTIONCAPTURED">
             <summary>
             Enum DELAYEDTRANSACTIONCAPTURED for "DELAYED_TRANSACTION_CAPTURED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.DELAYEDTRANSACTIONFAILED">
             <summary>
             Enum DELAYEDTRANSACTIONFAILED for "DELAYED_TRANSACTION_FAILED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CARDTOKENEXPIRED">
             <summary>
             Enum CARDTOKENEXPIRED for "CARD_TOKEN_EXPIRED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CARDTOKENUSED">
             <summary>
             Enum CARDTOKENUSED for "CARD_TOKEN_USED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.AMOUNTTOOHIGH">
             <summary>
             Enum AMOUNTTOOHIGH for "AMOUNT_TOO_HIGH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.UNSUPPORTEDINSTRUMENTTYPE">
             <summary>
             Enum UNSUPPORTEDINSTRUMENTTYPE for "UNSUPPORTED_INSTRUMENT_TYPE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.REFUNDAMOUNTINVALID">
             <summary>
             Enum REFUNDAMOUNTINVALID for "REFUND_AMOUNT_INVALID"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.REFUNDALREADYPENDING">
             <summary>
             Enum REFUNDALREADYPENDING for "REFUND_ALREADY_PENDING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.PAYMENTNOTREFUNDABLE">
             <summary>
             Enum PAYMENTNOTREFUNDABLE for "PAYMENT_NOT_REFUNDABLE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDCARDDATA">
             <summary>
             Enum INVALIDCARDDATA for "INVALID_CARD_DATA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.IDEMPOTENCYKEYREUSED">
             <summary>
             Enum IDEMPOTENCYKEYREUSED for "IDEMPOTENCY_KEY_REUSED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CARDDECLINED">
             <summary>
             Enum CARDDECLINED for "CARD_DECLINED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.VERIFYCVVFAILURE">
             <summary>
             Enum VERIFYCVVFAILURE for "VERIFY_CVV_FAILURE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.VERIFYAVSFAILURE">
             <summary>
             Enum VERIFYAVSFAILURE for "VERIFY_AVS_FAILURE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CARDDECLINEDCALLISSUER">
             <summary>
             Enum CARDDECLINEDCALLISSUER for "CARD_DECLINED_CALL_ISSUER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.NOTFOUND">
             <summary>
             Enum NOTFOUND for "NOT_FOUND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.REQUESTTIMEOUT">
             <summary>
             Enum REQUESTTIMEOUT for "REQUEST_TIMEOUT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CONFLICT">
             <summary>
             Enum CONFLICT for "CONFLICT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.REQUESTENTITYTOOLARGE">
             <summary>
             Enum REQUESTENTITYTOOLARGE for "REQUEST_ENTITY_TOO_LARGE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.UNSUPPORTEDMEDIATYPE">
             <summary>
             Enum UNSUPPORTEDMEDIATYPE for "UNSUPPORTED_MEDIA_TYPE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.RATELIMITED">
             <summary>
             Enum RATELIMITED for "RATE_LIMITED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.NOTIMPLEMENTED">
             <summary>
             Enum NOTIMPLEMENTED for "NOT_IMPLEMENTED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.SERVICEUNAVAILABLE">
             <summary>
             Enum SERVICEUNAVAILABLE for "SERVICE_UNAVAILABLE"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.Error.Category">
             <summary>
             The error's high-level category. See [ErrorCategory](#type-errorcategory) for possible values.
             </summary>
             <value>The error's high-level category. See [ErrorCategory](#type-errorcategory) for possible values.</value>
            </member>
        <member name="P:Square.Connect.Model.Error.Code">
             <summary>
             The error's specific code. See [ErrorCode](#type-errorcode) for possible values
             </summary>
             <value>The error's specific code. See [ErrorCode](#type-errorcode) for possible values</value>
            </member>
        <member name="M:Square.Connect.Model.Error.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Error" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.Error.#ctor(System.Nullable{Square.Connect.Model.Error.CategoryEnum},System.Nullable{Square.Connect.Model.Error.CodeEnum},System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Error" /> class.
             </summary>
             <param name="Category">The error's high-level category. See [ErrorCategory](#type-errorcategory) for possible values. (required).</param>
             <param name="Code">The error's specific code. See [ErrorCode](#type-errorcode) for possible values (required).</param>
             <param name="Detail">A human-readable description of the error for debugging purposes..</param>
             <param name="Field">The name of the field provided in the original request that the error pertains to, if any..</param>
            </member>
        <member name="P:Square.Connect.Model.Error.Detail">
             <summary>
             A human-readable description of the error for debugging purposes.
             </summary>
             <value>A human-readable description of the error for debugging purposes.</value>
            </member>
        <member name="P:Square.Connect.Model.Error.Field">
             <summary>
             The name of the field provided in the original request that the error pertains to, if any.
             </summary>
             <value>The name of the field provided in the original request that the error pertains to, if any.</value>
            </member>
        <member name="M:Square.Connect.Model.Error.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Error.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Error.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Error.Equals(Square.Connect.Model.Error)">
             <summary>
             Returns true if Error instances are equal
             </summary>
             <param name="other">Instance of Error to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Error.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ErrorCategory">
             <summary>
             Indicates which high-level category of error has occurred during a request to the Connect API.
             </summary>
             <value>Indicates which high-level category of error has occurred during a request to the Connect API.</value>
            </member>
        <member name="F:Square.Connect.Model.ErrorCategory.APIERROR">
             <summary>
             Enum APIERROR for "API_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCategory.AUTHENTICATIONERROR">
             <summary>
             Enum AUTHENTICATIONERROR for "AUTHENTICATION_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCategory.INVALIDREQUESTERROR">
             <summary>
             Enum INVALIDREQUESTERROR for "INVALID_REQUEST_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCategory.RATELIMITERROR">
             <summary>
             Enum RATELIMITERROR for "RATE_LIMIT_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCategory.PAYMENTMETHODERROR">
             <summary>
             Enum PAYMENTMETHODERROR for "PAYMENT_METHOD_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCategory.REFUNDERROR">
             <summary>
             Enum REFUNDERROR for "REFUND_ERROR"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.ErrorCode">
             <summary>
             Indicates specific errors that can occur during a request to the Connect API.
             </summary>
             <value>Indicates specific errors that can occur during a request to the Connect API.</value>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INTERNALSERVERERROR">
             <summary>
             Enum INTERNALSERVERERROR for "INTERNAL_SERVER_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.UNAUTHORIZED">
             <summary>
             Enum UNAUTHORIZED for "UNAUTHORIZED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.ACCESSTOKENEXPIRED">
             <summary>
             Enum ACCESSTOKENEXPIRED for "ACCESS_TOKEN_EXPIRED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.ACCESSTOKENREVOKED">
             <summary>
             Enum ACCESSTOKENREVOKED for "ACCESS_TOKEN_REVOKED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.FORBIDDEN">
             <summary>
             Enum FORBIDDEN for "FORBIDDEN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INSUFFICIENTSCOPES">
             <summary>
             Enum INSUFFICIENTSCOPES for "INSUFFICIENT_SCOPES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.APPLICATIONDISABLED">
             <summary>
             Enum APPLICATIONDISABLED for "APPLICATION_DISABLED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.V1APPLICATION">
             <summary>
             Enum V1APPLICATION for "V1_APPLICATION"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.V1ACCESSTOKEN">
             <summary>
             Enum V1ACCESSTOKEN for "V1_ACCESS_TOKEN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.CARDPROCESSINGNOTENABLED">
             <summary>
             Enum CARDPROCESSINGNOTENABLED for "CARD_PROCESSING_NOT_ENABLED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.BADREQUEST">
             <summary>
             Enum BADREQUEST for "BAD_REQUEST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.MISSINGREQUIREDPARAMETER">
             <summary>
             Enum MISSINGREQUIREDPARAMETER for "MISSING_REQUIRED_PARAMETER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INCORRECTTYPE">
             <summary>
             Enum INCORRECTTYPE for "INCORRECT_TYPE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDTIME">
             <summary>
             Enum INVALIDTIME for "INVALID_TIME"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDTIMERANGE">
             <summary>
             Enum INVALIDTIMERANGE for "INVALID_TIME_RANGE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDVALUE">
             <summary>
             Enum INVALIDVALUE for "INVALID_VALUE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDCURSOR">
             <summary>
             Enum INVALIDCURSOR for "INVALID_CURSOR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.UNKNOWNQUERYPARAMETER">
             <summary>
             Enum UNKNOWNQUERYPARAMETER for "UNKNOWN_QUERY_PARAMETER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.CONFLICTINGPARAMETERS">
             <summary>
             Enum CONFLICTINGPARAMETERS for "CONFLICTING_PARAMETERS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.EXPECTEDJSONBODY">
             <summary>
             Enum EXPECTEDJSONBODY for "EXPECTED_JSON_BODY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDSORTORDER">
             <summary>
             Enum INVALIDSORTORDER for "INVALID_SORT_ORDER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.VALUEREGEXMISMATCH">
             <summary>
             Enum VALUEREGEXMISMATCH for "VALUE_REGEX_MISMATCH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.VALUETOOSHORT">
             <summary>
             Enum VALUETOOSHORT for "VALUE_TOO_SHORT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.VALUETOOLONG">
             <summary>
             Enum VALUETOOLONG for "VALUE_TOO_LONG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.VALUETOOLOW">
             <summary>
             Enum VALUETOOLOW for "VALUE_TOO_LOW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.VALUETOOHIGH">
             <summary>
             Enum VALUETOOHIGH for "VALUE_TOO_HIGH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.VALUEEMPTY">
             <summary>
             Enum VALUEEMPTY for "VALUE_EMPTY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.ARRAYEMPTY">
             <summary>
             Enum ARRAYEMPTY for "ARRAY_EMPTY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.EXPECTEDBOOLEAN">
             <summary>
             Enum EXPECTEDBOOLEAN for "EXPECTED_BOOLEAN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.EXPECTEDINTEGER">
             <summary>
             Enum EXPECTEDINTEGER for "EXPECTED_INTEGER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.EXPECTEDFLOAT">
             <summary>
             Enum EXPECTEDFLOAT for "EXPECTED_FLOAT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.EXPECTEDSTRING">
             <summary>
             Enum EXPECTEDSTRING for "EXPECTED_STRING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.EXPECTEDOBJECT">
             <summary>
             Enum EXPECTEDOBJECT for "EXPECTED_OBJECT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.EXPECTEDARRAY">
             <summary>
             Enum EXPECTEDARRAY for "EXPECTED_ARRAY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.EXPECTEDBASE64ENCODEDBYTEARRAY">
             <summary>
             Enum EXPECTEDBASE64ENCODEDBYTEARRAY for "EXPECTED_BASE64_ENCODED_BYTE_ARRAY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDARRAYVALUE">
             <summary>
             Enum INVALIDARRAYVALUE for "INVALID_ARRAY_VALUE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDENUMVALUE">
             <summary>
             Enum INVALIDENUMVALUE for "INVALID_ENUM_VALUE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDCONTENTTYPE">
             <summary>
             Enum INVALIDCONTENTTYPE for "INVALID_CONTENT_TYPE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDFORMVALUE">
             <summary>
             Enum INVALIDFORMVALUE for "INVALID_FORM_VALUE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.ONEINSTRUMENTEXPECTED">
             <summary>
             Enum ONEINSTRUMENTEXPECTED for "ONE_INSTRUMENT_EXPECTED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.NOFIELDSSET">
             <summary>
             Enum NOFIELDSSET for "NO_FIELDS_SET"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.CARDEXPIRED">
             <summary>
             Enum CARDEXPIRED for "CARD_EXPIRED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDEXPIRATION">
             <summary>
             Enum INVALIDEXPIRATION for "INVALID_EXPIRATION"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDEXPIRATIONYEAR">
             <summary>
             Enum INVALIDEXPIRATIONYEAR for "INVALID_EXPIRATION_YEAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDEXPIRATIONDATE">
             <summary>
             Enum INVALIDEXPIRATIONDATE for "INVALID_EXPIRATION_DATE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.UNSUPPORTEDCARDBRAND">
             <summary>
             Enum UNSUPPORTEDCARDBRAND for "UNSUPPORTED_CARD_BRAND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDCARD">
             <summary>
             Enum INVALIDCARD for "INVALID_CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.DELAYEDTRANSACTIONEXPIRED">
             <summary>
             Enum DELAYEDTRANSACTIONEXPIRED for "DELAYED_TRANSACTION_EXPIRED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.DELAYEDTRANSACTIONCANCELED">
             <summary>
             Enum DELAYEDTRANSACTIONCANCELED for "DELAYED_TRANSACTION_CANCELED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.DELAYEDTRANSACTIONCAPTURED">
             <summary>
             Enum DELAYEDTRANSACTIONCAPTURED for "DELAYED_TRANSACTION_CAPTURED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.DELAYEDTRANSACTIONFAILED">
             <summary>
             Enum DELAYEDTRANSACTIONFAILED for "DELAYED_TRANSACTION_FAILED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.CARDTOKENEXPIRED">
             <summary>
             Enum CARDTOKENEXPIRED for "CARD_TOKEN_EXPIRED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.CARDTOKENUSED">
             <summary>
             Enum CARDTOKENUSED for "CARD_TOKEN_USED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.AMOUNTTOOHIGH">
             <summary>
             Enum AMOUNTTOOHIGH for "AMOUNT_TOO_HIGH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.UNSUPPORTEDINSTRUMENTTYPE">
             <summary>
             Enum UNSUPPORTEDINSTRUMENTTYPE for "UNSUPPORTED_INSTRUMENT_TYPE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.REFUNDAMOUNTINVALID">
             <summary>
             Enum REFUNDAMOUNTINVALID for "REFUND_AMOUNT_INVALID"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.REFUNDALREADYPENDING">
             <summary>
             Enum REFUNDALREADYPENDING for "REFUND_ALREADY_PENDING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.PAYMENTNOTREFUNDABLE">
             <summary>
             Enum PAYMENTNOTREFUNDABLE for "PAYMENT_NOT_REFUNDABLE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDCARDDATA">
             <summary>
             Enum INVALIDCARDDATA for "INVALID_CARD_DATA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.IDEMPOTENCYKEYREUSED">
             <summary>
             Enum IDEMPOTENCYKEYREUSED for "IDEMPOTENCY_KEY_REUSED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.CARDDECLINED">
             <summary>
             Enum CARDDECLINED for "CARD_DECLINED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.VERIFYCVVFAILURE">
             <summary>
             Enum VERIFYCVVFAILURE for "VERIFY_CVV_FAILURE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.VERIFYAVSFAILURE">
             <summary>
             Enum VERIFYAVSFAILURE for "VERIFY_AVS_FAILURE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.CARDDECLINEDCALLISSUER">
             <summary>
             Enum CARDDECLINEDCALLISSUER for "CARD_DECLINED_CALL_ISSUER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.NOTFOUND">
             <summary>
             Enum NOTFOUND for "NOT_FOUND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.REQUESTTIMEOUT">
             <summary>
             Enum REQUESTTIMEOUT for "REQUEST_TIMEOUT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.CONFLICT">
             <summary>
             Enum CONFLICT for "CONFLICT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.REQUESTENTITYTOOLARGE">
             <summary>
             Enum REQUESTENTITYTOOLARGE for "REQUEST_ENTITY_TOO_LARGE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.UNSUPPORTEDMEDIATYPE">
             <summary>
             Enum UNSUPPORTEDMEDIATYPE for "UNSUPPORTED_MEDIA_TYPE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.RATELIMITED">
             <summary>
             Enum RATELIMITED for "RATE_LIMITED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.NOTIMPLEMENTED">
             <summary>
             Enum NOTIMPLEMENTED for "NOT_IMPLEMENTED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.SERVICEUNAVAILABLE">
             <summary>
             Enum SERVICEUNAVAILABLE for "SERVICE_UNAVAILABLE"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.ListCustomersRequest">
             <summary>
             Defines the query parameters that can be provided in a request to the [ListCustomers](#endpoint-listcustomers) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersRequest.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListCustomersRequest" /> class.
             </summary>
             <param name="Cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information..</param>
            </member>
        <member name="P:Square.Connect.Model.ListCustomersRequest.Cursor">
             <summary>
             A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
             </summary>
             <value>A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.</value>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersRequest.Equals(Square.Connect.Model.ListCustomersRequest)">
             <summary>
             Returns true if ListCustomersRequest instances are equal
             </summary>
             <param name="other">Instance of ListCustomersRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListCustomersResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [ListCustomers](#endpoint-listcustomers) endpoint.  One of `errors` or `customers` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.Customer},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListCustomersResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Customers">An array of `Customer` objects that match your query..</param>
             <param name="Cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. This value is present only if the request succeeded and additional results are available.  See [Paginating results](#paginatingresults) for more information..</param>
            </member>
        <member name="P:Square.Connect.Model.ListCustomersResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.ListCustomersResponse.Customers">
             <summary>
             An array of `Customer` objects that match your query.
             </summary>
             <value>An array of `Customer` objects that match your query.</value>
            </member>
        <member name="P:Square.Connect.Model.ListCustomersResponse.Cursor">
             <summary>
             A pagination cursor to retrieve the next set of results for your original query to the endpoint. This value is present only if the request succeeded and additional results are available.  See [Paginating results](#paginatingresults) for more information.
             </summary>
             <value>A pagination cursor to retrieve the next set of results for your original query to the endpoint. This value is present only if the request succeeded and additional results are available.  See [Paginating results](#paginatingresults) for more information.</value>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersResponse.Equals(Square.Connect.Model.ListCustomersResponse)">
             <summary>
             Returns true if ListCustomersResponse instances are equal
             </summary>
             <param name="other">Instance of ListCustomersResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListLocationsRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListLocationsRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsRequest.Equals(Square.Connect.Model.ListLocationsRequest)">
             <summary>
             Returns true if ListLocationsRequest instances are equal
             </summary>
             <param name="other">Instance of ListLocationsRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListLocationsResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [ListLocations](#endpoint-listlocations) endpoint.  One of `errors` or `locations` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.Location})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListLocationsResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Locations">The business's locations..</param>
            </member>
        <member name="P:Square.Connect.Model.ListLocationsResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.ListLocationsResponse.Locations">
             <summary>
             The business's locations.
             </summary>
             <value>The business's locations.</value>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsResponse.Equals(Square.Connect.Model.ListLocationsResponse)">
             <summary>
             Returns true if ListLocationsResponse instances are equal
             </summary>
             <param name="other">Instance of ListLocationsResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListRefundsRequest">
             <summary>
             Defines the query parameters that can be included in a request to the [ListRefunds](#endpoint-listrefunds) endpoint.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.ListRefundsRequest.SortOrderEnum">
             <summary>
             The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`
             </summary>
             <value>The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`</value>
            </member>
        <member name="F:Square.Connect.Model.ListRefundsRequest.SortOrderEnum.DESC">
             <summary>
             Enum DESC for "DESC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ListRefundsRequest.SortOrderEnum.ASC">
             <summary>
             Enum ASC for "ASC"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.ListRefundsRequest.SortOrder">
             <summary>
             The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`
             </summary>
             <value>The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`</value>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsRequest.#ctor(System.String,System.String,System.Nullable{Square.Connect.Model.ListRefundsRequest.SortOrderEnum},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListRefundsRequest" /> class.
             </summary>
             <param name="BeginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year..</param>
             <param name="EndTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time..</param>
             <param name="SortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`.</param>
             <param name="Cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information..</param>
            </member>
        <member name="P:Square.Connect.Model.ListRefundsRequest.BeginTime">
             <summary>
             The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
             </summary>
             <value>The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.</value>
            </member>
        <member name="P:Square.Connect.Model.ListRefundsRequest.EndTime">
             <summary>
             The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
             </summary>
             <value>The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.</value>
            </member>
        <member name="P:Square.Connect.Model.ListRefundsRequest.Cursor">
             <summary>
             A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
             </summary>
             <value>A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.</value>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsRequest.Equals(Square.Connect.Model.ListRefundsRequest)">
             <summary>
             Returns true if ListRefundsRequest instances are equal
             </summary>
             <param name="other">Instance of ListRefundsRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListRefundsResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [ListRefunds](#endpoint-listrefunds) endpoint.  One of `errors` or `refunds` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.Refund},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListRefundsResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Refunds">An array of refunds that match your query..</param>
             <param name="Cursor">A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the `cursor` parameter in a subsequent request to this endpoint.  See [Paginating results](#paginatingresults) for more information..</param>
            </member>
        <member name="P:Square.Connect.Model.ListRefundsResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.ListRefundsResponse.Refunds">
             <summary>
             An array of refunds that match your query.
             </summary>
             <value>An array of refunds that match your query.</value>
            </member>
        <member name="P:Square.Connect.Model.ListRefundsResponse.Cursor">
             <summary>
             A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the `cursor` parameter in a subsequent request to this endpoint.  See [Paginating results](#paginatingresults) for more information.
             </summary>
             <value>A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the `cursor` parameter in a subsequent request to this endpoint.  See [Paginating results](#paginatingresults) for more information.</value>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsResponse.Equals(Square.Connect.Model.ListRefundsResponse)">
             <summary>
             Returns true if ListRefundsResponse instances are equal
             </summary>
             <param name="other">Instance of ListRefundsResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListTransactionsRequest">
             <summary>
             Defines the query parameters that can be included in a request to the [ListTransactions](#endpoint-listtransactions) endpoint.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.ListTransactionsRequest.SortOrderEnum">
             <summary>
             The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`
             </summary>
             <value>The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`</value>
            </member>
        <member name="F:Square.Connect.Model.ListTransactionsRequest.SortOrderEnum.DESC">
             <summary>
             Enum DESC for "DESC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ListTransactionsRequest.SortOrderEnum.ASC">
             <summary>
             Enum ASC for "ASC"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.ListTransactionsRequest.SortOrder">
             <summary>
             The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`
             </summary>
             <value>The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`</value>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsRequest.#ctor(System.String,System.String,System.Nullable{Square.Connect.Model.ListTransactionsRequest.SortOrderEnum},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListTransactionsRequest" /> class.
             </summary>
             <param name="BeginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year..</param>
             <param name="EndTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time..</param>
             <param name="SortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`.</param>
             <param name="Cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information..</param>
            </member>
        <member name="P:Square.Connect.Model.ListTransactionsRequest.BeginTime">
             <summary>
             The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
             </summary>
             <value>The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.</value>
            </member>
        <member name="P:Square.Connect.Model.ListTransactionsRequest.EndTime">
             <summary>
             The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
             </summary>
             <value>The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.</value>
            </member>
        <member name="P:Square.Connect.Model.ListTransactionsRequest.Cursor">
             <summary>
             A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
             </summary>
             <value>A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.</value>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsRequest.Equals(Square.Connect.Model.ListTransactionsRequest)">
             <summary>
             Returns true if ListTransactionsRequest instances are equal
             </summary>
             <param name="other">Instance of ListTransactionsRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListTransactionsResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [ListTransactions](#endpoint-listtransactions) endpoint.  One of `errors` or `transactions` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.Transaction},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListTransactionsResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Transactions">An array of transactions that match your query..</param>
             <param name="Cursor">A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the `cursor` parameter in a subsequent request to this endpoint.  See [Paginating results](#paginatingresults) for more information..</param>
            </member>
        <member name="P:Square.Connect.Model.ListTransactionsResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.ListTransactionsResponse.Transactions">
             <summary>
             An array of transactions that match your query.
             </summary>
             <value>An array of transactions that match your query.</value>
            </member>
        <member name="P:Square.Connect.Model.ListTransactionsResponse.Cursor">
             <summary>
             A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the `cursor` parameter in a subsequent request to this endpoint.  See [Paginating results](#paginatingresults) for more information.
             </summary>
             <value>A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the `cursor` parameter in a subsequent request to this endpoint.  See [Paginating results](#paginatingresults) for more information.</value>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsResponse.Equals(Square.Connect.Model.ListTransactionsResponse)">
             <summary>
             Returns true if ListTransactionsResponse instances are equal
             </summary>
             <param name="other">Instance of ListTransactionsResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.Location">
             <summary>
             Represents one of a business's locations.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Location.CapabilitiesEnum">
             <summary>
             Gets or Sets Capabilities
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CapabilitiesEnum.PROCESSING">
             <summary>
             Enum PROCESSING for "CREDIT_CARD_PROCESSING"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.Location.Capabilities">
             <summary>
             Indicates which Square features are enabled for the location.  See [LocationCapability](#type-locationcapability) for possible values.
             </summary>
             <value>Indicates which Square features are enabled for the location.  See [LocationCapability](#type-locationcapability) for possible values.</value>
            </member>
        <member name="M:Square.Connect.Model.Location.#ctor(System.String,System.String,Square.Connect.Model.Address,System.String,System.Collections.Generic.List{Square.Connect.Model.Location.CapabilitiesEnum})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Location" /> class.
             </summary>
             <param name="Id">The location's unique ID..</param>
             <param name="Name">The location's name..</param>
             <param name="Address">The location's physical address..</param>
             <param name="Timezone">The [IANA Timezone Database](https://www.iana.org/time-zones) identifier for the location's timezone..</param>
             <param name="Capabilities">Indicates which Square features are enabled for the location.  See [LocationCapability](#type-locationcapability) for possible values..</param>
            </member>
        <member name="P:Square.Connect.Model.Location.Id">
             <summary>
             The location's unique ID.
             </summary>
             <value>The location's unique ID.</value>
            </member>
        <member name="P:Square.Connect.Model.Location.Name">
             <summary>
             The location's name.
             </summary>
             <value>The location's name.</value>
            </member>
        <member name="P:Square.Connect.Model.Location.Address">
             <summary>
             The location's physical address.
             </summary>
             <value>The location's physical address.</value>
            </member>
        <member name="P:Square.Connect.Model.Location.Timezone">
             <summary>
             The [IANA Timezone Database](https://www.iana.org/time-zones) identifier for the location's timezone.
             </summary>
             <value>The [IANA Timezone Database](https://www.iana.org/time-zones) identifier for the location's timezone.</value>
            </member>
        <member name="M:Square.Connect.Model.Location.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Location.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Location.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Location.Equals(Square.Connect.Model.Location)">
             <summary>
             Returns true if Location instances are equal
             </summary>
             <param name="other">Instance of Location to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Location.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.LocationCapability">
             <summary>
             Indicates account capabilities that a business's location might or might not have enabled.
             </summary>
             <value>Indicates account capabilities that a business's location might or might not have enabled.</value>
            </member>
        <member name="F:Square.Connect.Model.LocationCapability.PROCESSING">
             <summary>
             Enum PROCESSING for "CREDIT_CARD_PROCESSING"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Money">
             <summary>
             Represents an amount of money.  __Important:__ Unlike version 1 of the Connect API, __all monetary amounts returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative if they represent money being paid _by_ a merchant, instead of money being paid _to_ a merchant.)
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Money.CurrencyEnum">
             <summary>
             The type of currency, in __ISO 4217 format__. For example, the currency code for US dollars is `USD`.  See [Currency](#type-currency) for possible values.
             </summary>
             <value>The type of currency, in __ISO 4217 format__. For example, the currency code for US dollars is `USD`.  See [Currency](#type-currency) for possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.AED">
             <summary>
             Enum AED for "AED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.AFN">
             <summary>
             Enum AFN for "AFN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ALL">
             <summary>
             Enum ALL for "ALL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.AMD">
             <summary>
             Enum AMD for "AMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ANG">
             <summary>
             Enum ANG for "ANG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.AOA">
             <summary>
             Enum AOA for "AOA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ARS">
             <summary>
             Enum ARS for "ARS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.AUD">
             <summary>
             Enum AUD for "AUD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.AWG">
             <summary>
             Enum AWG for "AWG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.AZN">
             <summary>
             Enum AZN for "AZN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BAM">
             <summary>
             Enum BAM for "BAM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BBD">
             <summary>
             Enum BBD for "BBD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BDT">
             <summary>
             Enum BDT for "BDT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BGN">
             <summary>
             Enum BGN for "BGN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BHD">
             <summary>
             Enum BHD for "BHD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BIF">
             <summary>
             Enum BIF for "BIF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BMD">
             <summary>
             Enum BMD for "BMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BND">
             <summary>
             Enum BND for "BND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BOB">
             <summary>
             Enum BOB for "BOB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BOV">
             <summary>
             Enum BOV for "BOV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BRL">
             <summary>
             Enum BRL for "BRL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BSD">
             <summary>
             Enum BSD for "BSD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BTN">
             <summary>
             Enum BTN for "BTN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BWP">
             <summary>
             Enum BWP for "BWP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BYR">
             <summary>
             Enum BYR for "BYR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BZD">
             <summary>
             Enum BZD for "BZD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CAD">
             <summary>
             Enum CAD for "CAD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CDF">
             <summary>
             Enum CDF for "CDF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CHE">
             <summary>
             Enum CHE for "CHE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CHF">
             <summary>
             Enum CHF for "CHF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CHW">
             <summary>
             Enum CHW for "CHW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CLF">
             <summary>
             Enum CLF for "CLF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CLP">
             <summary>
             Enum CLP for "CLP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CNY">
             <summary>
             Enum CNY for "CNY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.COP">
             <summary>
             Enum COP for "COP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.COU">
             <summary>
             Enum COU for "COU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CRC">
             <summary>
             Enum CRC for "CRC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CUC">
             <summary>
             Enum CUC for "CUC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CUP">
             <summary>
             Enum CUP for "CUP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CVE">
             <summary>
             Enum CVE for "CVE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CZK">
             <summary>
             Enum CZK for "CZK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.DJF">
             <summary>
             Enum DJF for "DJF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.DKK">
             <summary>
             Enum DKK for "DKK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.DOP">
             <summary>
             Enum DOP for "DOP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.DZD">
             <summary>
             Enum DZD for "DZD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.EGP">
             <summary>
             Enum EGP for "EGP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ERN">
             <summary>
             Enum ERN for "ERN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ETB">
             <summary>
             Enum ETB for "ETB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.EUR">
             <summary>
             Enum EUR for "EUR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.FJD">
             <summary>
             Enum FJD for "FJD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.FKP">
             <summary>
             Enum FKP for "FKP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.GBP">
             <summary>
             Enum GBP for "GBP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.GEL">
             <summary>
             Enum GEL for "GEL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.GHS">
             <summary>
             Enum GHS for "GHS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.GIP">
             <summary>
             Enum GIP for "GIP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.GMD">
             <summary>
             Enum GMD for "GMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.GNF">
             <summary>
             Enum GNF for "GNF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.GTQ">
             <summary>
             Enum GTQ for "GTQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.GYD">
             <summary>
             Enum GYD for "GYD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.HKD">
             <summary>
             Enum HKD for "HKD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.HNL">
             <summary>
             Enum HNL for "HNL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.HRK">
             <summary>
             Enum HRK for "HRK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.HTG">
             <summary>
             Enum HTG for "HTG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.HUF">
             <summary>
             Enum HUF for "HUF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.IDR">
             <summary>
             Enum IDR for "IDR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ILS">
             <summary>
             Enum ILS for "ILS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.INR">
             <summary>
             Enum INR for "INR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.IQD">
             <summary>
             Enum IQD for "IQD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.IRR">
             <summary>
             Enum IRR for "IRR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ISK">
             <summary>
             Enum ISK for "ISK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.JMD">
             <summary>
             Enum JMD for "JMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.JOD">
             <summary>
             Enum JOD for "JOD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.JPY">
             <summary>
             Enum JPY for "JPY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KES">
             <summary>
             Enum KES for "KES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KGS">
             <summary>
             Enum KGS for "KGS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KHR">
             <summary>
             Enum KHR for "KHR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KMF">
             <summary>
             Enum KMF for "KMF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KPW">
             <summary>
             Enum KPW for "KPW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KRW">
             <summary>
             Enum KRW for "KRW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KWD">
             <summary>
             Enum KWD for "KWD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KYD">
             <summary>
             Enum KYD for "KYD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KZT">
             <summary>
             Enum KZT for "KZT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.LAK">
             <summary>
             Enum LAK for "LAK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.LBP">
             <summary>
             Enum LBP for "LBP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.LKR">
             <summary>
             Enum LKR for "LKR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.LRD">
             <summary>
             Enum LRD for "LRD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.LSL">
             <summary>
             Enum LSL for "LSL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.LTL">
             <summary>
             Enum LTL for "LTL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.LVL">
             <summary>
             Enum LVL for "LVL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.LYD">
             <summary>
             Enum LYD for "LYD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MAD">
             <summary>
             Enum MAD for "MAD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MDL">
             <summary>
             Enum MDL for "MDL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MGA">
             <summary>
             Enum MGA for "MGA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MKD">
             <summary>
             Enum MKD for "MKD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MMK">
             <summary>
             Enum MMK for "MMK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MNT">
             <summary>
             Enum MNT for "MNT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MOP">
             <summary>
             Enum MOP for "MOP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MRO">
             <summary>
             Enum MRO for "MRO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MUR">
             <summary>
             Enum MUR for "MUR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MVR">
             <summary>
             Enum MVR for "MVR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MWK">
             <summary>
             Enum MWK for "MWK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MXN">
             <summary>
             Enum MXN for "MXN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MXV">
             <summary>
             Enum MXV for "MXV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MYR">
             <summary>
             Enum MYR for "MYR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MZN">
             <summary>
             Enum MZN for "MZN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.NAD">
             <summary>
             Enum NAD for "NAD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.NGN">
             <summary>
             Enum NGN for "NGN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.NIO">
             <summary>
             Enum NIO for "NIO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.NOK">
             <summary>
             Enum NOK for "NOK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.NPR">
             <summary>
             Enum NPR for "NPR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.NZD">
             <summary>
             Enum NZD for "NZD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.OMR">
             <summary>
             Enum OMR for "OMR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.PAB">
             <summary>
             Enum PAB for "PAB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.PEN">
             <summary>
             Enum PEN for "PEN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.PGK">
             <summary>
             Enum PGK for "PGK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.PHP">
             <summary>
             Enum PHP for "PHP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.PKR">
             <summary>
             Enum PKR for "PKR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.PLN">
             <summary>
             Enum PLN for "PLN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.PYG">
             <summary>
             Enum PYG for "PYG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.QAR">
             <summary>
             Enum QAR for "QAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.RON">
             <summary>
             Enum RON for "RON"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.RSD">
             <summary>
             Enum RSD for "RSD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.RUB">
             <summary>
             Enum RUB for "RUB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.RWF">
             <summary>
             Enum RWF for "RWF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SAR">
             <summary>
             Enum SAR for "SAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SBD">
             <summary>
             Enum SBD for "SBD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SCR">
             <summary>
             Enum SCR for "SCR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SDG">
             <summary>
             Enum SDG for "SDG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SEK">
             <summary>
             Enum SEK for "SEK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SGD">
             <summary>
             Enum SGD for "SGD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SHP">
             <summary>
             Enum SHP for "SHP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SLL">
             <summary>
             Enum SLL for "SLL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SOS">
             <summary>
             Enum SOS for "SOS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SRD">
             <summary>
             Enum SRD for "SRD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SSP">
             <summary>
             Enum SSP for "SSP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.STD">
             <summary>
             Enum STD for "STD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SVC">
             <summary>
             Enum SVC for "SVC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SYP">
             <summary>
             Enum SYP for "SYP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SZL">
             <summary>
             Enum SZL for "SZL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.THB">
             <summary>
             Enum THB for "THB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.TJS">
             <summary>
             Enum TJS for "TJS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.TMT">
             <summary>
             Enum TMT for "TMT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.TND">
             <summary>
             Enum TND for "TND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.TOP">
             <summary>
             Enum TOP for "TOP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.TRY">
             <summary>
             Enum TRY for "TRY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.TTD">
             <summary>
             Enum TTD for "TTD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.TWD">
             <summary>
             Enum TWD for "TWD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.TZS">
             <summary>
             Enum TZS for "TZS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.UAH">
             <summary>
             Enum UAH for "UAH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.UGX">
             <summary>
             Enum UGX for "UGX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.USD">
             <summary>
             Enum USD for "USD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.USN">
             <summary>
             Enum USN for "USN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.USS">
             <summary>
             Enum USS for "USS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.UYI">
             <summary>
             Enum UYI for "UYI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.UYU">
             <summary>
             Enum UYU for "UYU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.UZS">
             <summary>
             Enum UZS for "UZS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.VEF">
             <summary>
             Enum VEF for "VEF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.VND">
             <summary>
             Enum VND for "VND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.VUV">
             <summary>
             Enum VUV for "VUV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.WST">
             <summary>
             Enum WST for "WST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XAF">
             <summary>
             Enum XAF for "XAF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XAG">
             <summary>
             Enum XAG for "XAG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XAU">
             <summary>
             Enum XAU for "XAU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XBA">
             <summary>
             Enum XBA for "XBA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XBB">
             <summary>
             Enum XBB for "XBB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XBC">
             <summary>
             Enum XBC for "XBC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XBD">
             <summary>
             Enum XBD for "XBD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XCD">
             <summary>
             Enum XCD for "XCD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XDR">
             <summary>
             Enum XDR for "XDR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XOF">
             <summary>
             Enum XOF for "XOF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XPD">
             <summary>
             Enum XPD for "XPD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XPF">
             <summary>
             Enum XPF for "XPF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XPT">
             <summary>
             Enum XPT for "XPT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XTS">
             <summary>
             Enum XTS for "XTS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XXX">
             <summary>
             Enum XXX for "XXX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.YER">
             <summary>
             Enum YER for "YER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ZAR">
             <summary>
             Enum ZAR for "ZAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ZMK">
             <summary>
             Enum ZMK for "ZMK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ZMW">
             <summary>
             Enum ZMW for "ZMW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BTC">
             <summary>
             Enum BTC for "BTC"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.Money.Currency">
             <summary>
             The type of currency, in __ISO 4217 format__. For example, the currency code for US dollars is `USD`.  See [Currency](#type-currency) for possible values.
             </summary>
             <value>The type of currency, in __ISO 4217 format__. For example, the currency code for US dollars is `USD`.  See [Currency](#type-currency) for possible values.</value>
            </member>
        <member name="M:Square.Connect.Model.Money.#ctor(System.Nullable{System.Int64},System.Nullable{Square.Connect.Model.Money.CurrencyEnum})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Money" /> class.
             </summary>
             <param name="Amount">The amount of money, in the smallest denomination of the currency indicated by `currency`. For example, when `currency` is `USD`, `amount` is in cents..</param>
             <param name="Currency">The type of currency, in __ISO 4217 format__. For example, the currency code for US dollars is `USD`.  See [Currency](#type-currency) for possible values..</param>
            </member>
        <member name="P:Square.Connect.Model.Money.Amount">
             <summary>
             The amount of money, in the smallest denomination of the currency indicated by `currency`. For example, when `currency` is `USD`, `amount` is in cents.
             </summary>
             <value>The amount of money, in the smallest denomination of the currency indicated by `currency`. For example, when `currency` is `USD`, `amount` is in cents.</value>
            </member>
        <member name="M:Square.Connect.Model.Money.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Money.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Money.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Money.Equals(Square.Connect.Model.Money)">
             <summary>
             Returns true if Money instances are equal
             </summary>
             <param name="other">Instance of Money to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Money.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.Order">
             <summary>
             Contains all information related to a single order to process with Square, including line items that specify the products to purchase
             </summary>
            </member>
        <member name="M:Square.Connect.Model.Order.#ctor(System.String,System.String,System.String,System.Collections.Generic.List{Square.Connect.Model.OrderLineItem},Square.Connect.Model.Money)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Order" /> class.
             </summary>
             <param name="Id">The order's unique ID.  This value is not present if the order was not created with the [CreateOrder](#endpoint-createorder) endpoint..</param>
             <param name="LocationId">The ID of the merchant location this order is associated with..</param>
             <param name="ReferenceId">A client specified identifier to associate an entity in another system with this order..</param>
             <param name="LineItems">The line items included in the order. Every order has at least one line item..</param>
             <param name="TotalMoney">The total amount of money to collect for the order..</param>
            </member>
        <member name="P:Square.Connect.Model.Order.Id">
             <summary>
             The order's unique ID.  This value is not present if the order was not created with the [CreateOrder](#endpoint-createorder) endpoint.
             </summary>
             <value>The order's unique ID.  This value is not present if the order was not created with the [CreateOrder](#endpoint-createorder) endpoint.</value>
            </member>
        <member name="P:Square.Connect.Model.Order.LocationId">
             <summary>
             The ID of the merchant location this order is associated with.
             </summary>
             <value>The ID of the merchant location this order is associated with.</value>
            </member>
        <member name="P:Square.Connect.Model.Order.ReferenceId">
             <summary>
             A client specified identifier to associate an entity in another system with this order.
             </summary>
             <value>A client specified identifier to associate an entity in another system with this order.</value>
            </member>
        <member name="P:Square.Connect.Model.Order.LineItems">
             <summary>
             The line items included in the order. Every order has at least one line item.
             </summary>
             <value>The line items included in the order. Every order has at least one line item.</value>
            </member>
        <member name="P:Square.Connect.Model.Order.TotalMoney">
             <summary>
             The total amount of money to collect for the order.
             </summary>
             <value>The total amount of money to collect for the order.</value>
            </member>
        <member name="M:Square.Connect.Model.Order.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Order.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Order.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Order.Equals(Square.Connect.Model.Order)">
             <summary>
             Returns true if Order instances are equal
             </summary>
             <param name="other">Instance of Order to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Order.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.OrderLineItem">
             <summary>
             Represents a line item in an order. Each line item describes a different product to purchase, with its own quantity and price details.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItem.#ctor(System.String,System.String,System.String,Square.Connect.Model.Money,Square.Connect.Model.Money)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.OrderLineItem" /> class.
             </summary>
             <param name="Id">The line item's ID, unique only within this order..</param>
             <param name="Name">The name of the line item..</param>
             <param name="Quantity">The quantity of the product to purchase. Currently, this string must have an integer value..</param>
             <param name="BasePriceMoney">The base price for a single unit of the line item's associated variation.  If a line item represents a Custom Amount instead of a particular product, this field indicates that amount..</param>
             <param name="TotalMoney">The total amount of money to collect for this line item..</param>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItem.Id">
             <summary>
             The line item's ID, unique only within this order.
             </summary>
             <value>The line item's ID, unique only within this order.</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItem.Name">
             <summary>
             The name of the line item.
             </summary>
             <value>The name of the line item.</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItem.Quantity">
             <summary>
             The quantity of the product to purchase. Currently, this string must have an integer value.
             </summary>
             <value>The quantity of the product to purchase. Currently, this string must have an integer value.</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItem.BasePriceMoney">
             <summary>
             The base price for a single unit of the line item's associated variation.  If a line item represents a Custom Amount instead of a particular product, this field indicates that amount.
             </summary>
             <value>The base price for a single unit of the line item's associated variation.  If a line item represents a Custom Amount instead of a particular product, this field indicates that amount.</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItem.TotalMoney">
             <summary>
             The total amount of money to collect for this line item.
             </summary>
             <value>The total amount of money to collect for this line item.</value>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItem.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItem.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItem.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItem.Equals(Square.Connect.Model.OrderLineItem)">
             <summary>
             Returns true if OrderLineItem instances are equal
             </summary>
             <param name="other">Instance of OrderLineItem to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItem.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.Refund">
             <summary>
             Represents a refund processed for a Square transaction.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Refund.StatusEnum">
             <summary>
             The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`, or `FAILED`).
             </summary>
             <value>The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`, or `FAILED`).</value>
            </member>
        <member name="F:Square.Connect.Model.Refund.StatusEnum.PENDING">
             <summary>
             Enum PENDING for "PENDING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Refund.StatusEnum.APPROVED">
             <summary>
             Enum APPROVED for "APPROVED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Refund.StatusEnum.REJECTED">
             <summary>
             Enum REJECTED for "REJECTED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Refund.StatusEnum.FAILED">
             <summary>
             Enum FAILED for "FAILED"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.Refund.Status">
             <summary>
             The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`, or `FAILED`).
             </summary>
             <value>The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`, or `FAILED`).</value>
            </member>
        <member name="M:Square.Connect.Model.Refund.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Refund" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.Refund.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,Square.Connect.Model.Money,System.Nullable{Square.Connect.Model.Refund.StatusEnum},Square.Connect.Model.Money)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Refund" /> class.
             </summary>
             <param name="Id">The refund's unique ID. (required).</param>
             <param name="LocationId">The ID of the refund's associated location. (required).</param>
             <param name="TransactionId">The ID of the transaction that the refunded tender is part of. (required).</param>
             <param name="TenderId">The ID of the refunded tender. (required).</param>
             <param name="CreatedAt">The time when the refund was created, in RFC 3339 format..</param>
             <param name="Reason">The reason for the refund being issued. (required).</param>
             <param name="AmountMoney">The amount of money refunded to the buyer. (required).</param>
             <param name="Status">The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`, or `FAILED`). (required).</param>
             <param name="ProcessingFeeMoney">The amount of Square processing fee money refunded to the *merchant*..</param>
            </member>
        <member name="P:Square.Connect.Model.Refund.Id">
             <summary>
             The refund's unique ID.
             </summary>
             <value>The refund's unique ID.</value>
            </member>
        <member name="P:Square.Connect.Model.Refund.LocationId">
             <summary>
             The ID of the refund's associated location.
             </summary>
             <value>The ID of the refund's associated location.</value>
            </member>
        <member name="P:Square.Connect.Model.Refund.TransactionId">
             <summary>
             The ID of the transaction that the refunded tender is part of.
             </summary>
             <value>The ID of the transaction that the refunded tender is part of.</value>
            </member>
        <member name="P:Square.Connect.Model.Refund.TenderId">
             <summary>
             The ID of the refunded tender.
             </summary>
             <value>The ID of the refunded tender.</value>
            </member>
        <member name="P:Square.Connect.Model.Refund.CreatedAt">
             <summary>
             The time when the refund was created, in RFC 3339 format.
             </summary>
             <value>The time when the refund was created, in RFC 3339 format.</value>
            </member>
        <member name="P:Square.Connect.Model.Refund.Reason">
             <summary>
             The reason for the refund being issued.
             </summary>
             <value>The reason for the refund being issued.</value>
            </member>
        <member name="P:Square.Connect.Model.Refund.AmountMoney">
             <summary>
             The amount of money refunded to the buyer.
             </summary>
             <value>The amount of money refunded to the buyer.</value>
            </member>
        <member name="P:Square.Connect.Model.Refund.ProcessingFeeMoney">
             <summary>
             The amount of Square processing fee money refunded to the *merchant*.
             </summary>
             <value>The amount of Square processing fee money refunded to the *merchant*.</value>
            </member>
        <member name="M:Square.Connect.Model.Refund.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Refund.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Refund.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Refund.Equals(Square.Connect.Model.Refund)">
             <summary>
             Returns true if Refund instances are equal
             </summary>
             <param name="other">Instance of Refund to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Refund.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.RefundStatus">
             <summary>
             Indicates a refund's current status.
             </summary>
             <value>Indicates a refund's current status.</value>
            </member>
        <member name="F:Square.Connect.Model.RefundStatus.PENDING">
             <summary>
             Enum PENDING for "PENDING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.RefundStatus.APPROVED">
             <summary>
             Enum APPROVED for "APPROVED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.RefundStatus.REJECTED">
             <summary>
             Enum REJECTED for "REJECTED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.RefundStatus.FAILED">
             <summary>
             Enum FAILED for "FAILED"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.RetrieveCustomerRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveCustomerRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerRequest.Equals(Square.Connect.Model.RetrieveCustomerRequest)">
             <summary>
             Returns true if RetrieveCustomerRequest instances are equal
             </summary>
             <param name="other">Instance of RetrieveCustomerRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.RetrieveCustomerResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [RetrieveCustomer](#endpoint-retrievecustomer) endpoint.  One of `errors` or `customer` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Customer)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveCustomerResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Customer">The requested customer..</param>
            </member>
        <member name="P:Square.Connect.Model.RetrieveCustomerResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.RetrieveCustomerResponse.Customer">
             <summary>
             The requested customer.
             </summary>
             <value>The requested customer.</value>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerResponse.Equals(Square.Connect.Model.RetrieveCustomerResponse)">
             <summary>
             Returns true if RetrieveCustomerResponse instances are equal
             </summary>
             <param name="other">Instance of RetrieveCustomerResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.RetrieveTransactionRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveTransactionRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionRequest.Equals(Square.Connect.Model.RetrieveTransactionRequest)">
             <summary>
             Returns true if RetrieveTransactionRequest instances are equal
             </summary>
             <param name="other">Instance of RetrieveTransactionRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.RetrieveTransactionResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [RetrieveTransaction](#endpont-retrievetransaction) endpoint.  One of `errors` or `transaction` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Transaction)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveTransactionResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Transaction">The requested transaction..</param>
            </member>
        <member name="P:Square.Connect.Model.RetrieveTransactionResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.RetrieveTransactionResponse.Transaction">
             <summary>
             The requested transaction.
             </summary>
             <value>The requested transaction.</value>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionResponse.Equals(Square.Connect.Model.RetrieveTransactionResponse)">
             <summary>
             Returns true if RetrieveTransactionResponse instances are equal
             </summary>
             <param name="other">Instance of RetrieveTransactionResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.SortOrder">
             <summary>
             The order (e.g., chronological or alphabetical) in which results from a request are returned.
             </summary>
             <value>The order (e.g., chronological or alphabetical) in which results from a request are returned.</value>
            </member>
        <member name="F:Square.Connect.Model.SortOrder.DESC">
             <summary>
             Enum DESC for "DESC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.SortOrder.ASC">
             <summary>
             Enum ASC for "ASC"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Tender">
             <summary>
             Represents a tender (i.e., a method of payment) used in a Square transaction.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Tender.TypeEnum">
             <summary>
             The type of tender, such as `CARD` or `CASH`.
             </summary>
             <value>The type of tender, such as `CARD` or `CASH`.</value>
            </member>
        <member name="F:Square.Connect.Model.Tender.TypeEnum.CARD">
             <summary>
             Enum CARD for "CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Tender.TypeEnum.CASH">
             <summary>
             Enum CASH for "CASH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Tender.TypeEnum.THIRDPARTYCARD">
             <summary>
             Enum THIRDPARTYCARD for "THIRD_PARTY_CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Tender.TypeEnum.SQUAREGIFTCARD">
             <summary>
             Enum SQUAREGIFTCARD for "SQUARE_GIFT_CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Tender.TypeEnum.NOSALE">
             <summary>
             Enum NOSALE for "NO_SALE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Tender.TypeEnum.OTHER">
             <summary>
             Enum OTHER for "OTHER"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.Tender.Type">
             <summary>
             The type of tender, such as `CARD` or `CASH`.
             </summary>
             <value>The type of tender, such as `CARD` or `CASH`.</value>
            </member>
        <member name="M:Square.Connect.Model.Tender.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Tender" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.Tender.#ctor(System.String,System.String,System.String,System.String,System.String,Square.Connect.Model.Money,Square.Connect.Model.Money,System.String,System.Nullable{Square.Connect.Model.Tender.TypeEnum},Square.Connect.Model.TenderCardDetails,Square.Connect.Model.TenderCashDetails)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Tender" /> class.
             </summary>
             <param name="Id">The tender's unique ID..</param>
             <param name="LocationId">The ID of the transaction's associated location..</param>
             <param name="TransactionId">The ID of the tender's associated transaction..</param>
             <param name="CreatedAt">The time when the tender was created, in RFC 3339 format..</param>
             <param name="Note">An optional note associated with the tender at the time of payment..</param>
             <param name="AmountMoney">The amount of the tender..</param>
             <param name="ProcessingFeeMoney">The amount of any Square processing fees applied to the tender.  This field is not immediately populated when a new transaction is created. It is usually available after about ten seconds..</param>
             <param name="CustomerId">If the tender is associated with a customer or represents a customer's card on file, this is the ID of the associated customer..</param>
             <param name="Type">The type of tender, such as `CARD` or `CASH`. (required).</param>
             <param name="CardDetails">The details of the card tender.  This value is present only if the value of `type` is `CARD`..</param>
             <param name="CashDetails">The details of the cash tender.  This value is present only if the value of `type` is `CASH`..</param>
            </member>
        <member name="P:Square.Connect.Model.Tender.Id">
             <summary>
             The tender's unique ID.
             </summary>
             <value>The tender's unique ID.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.LocationId">
             <summary>
             The ID of the transaction's associated location.
             </summary>
             <value>The ID of the transaction's associated location.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.TransactionId">
             <summary>
             The ID of the tender's associated transaction.
             </summary>
             <value>The ID of the tender's associated transaction.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.CreatedAt">
             <summary>
             The time when the tender was created, in RFC 3339 format.
             </summary>
             <value>The time when the tender was created, in RFC 3339 format.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.Note">
             <summary>
             An optional note associated with the tender at the time of payment.
             </summary>
             <value>An optional note associated with the tender at the time of payment.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.AmountMoney">
             <summary>
             The amount of the tender.
             </summary>
             <value>The amount of the tender.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.ProcessingFeeMoney">
             <summary>
             The amount of any Square processing fees applied to the tender.  This field is not immediately populated when a new transaction is created. It is usually available after about ten seconds.
             </summary>
             <value>The amount of any Square processing fees applied to the tender.  This field is not immediately populated when a new transaction is created. It is usually available after about ten seconds.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.CustomerId">
             <summary>
             If the tender is associated with a customer or represents a customer's card on file, this is the ID of the associated customer.
             </summary>
             <value>If the tender is associated with a customer or represents a customer's card on file, this is the ID of the associated customer.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.CardDetails">
             <summary>
             The details of the card tender.  This value is present only if the value of `type` is `CARD`.
             </summary>
             <value>The details of the card tender.  This value is present only if the value of `type` is `CARD`.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.CashDetails">
             <summary>
             The details of the cash tender.  This value is present only if the value of `type` is `CASH`.
             </summary>
             <value>The details of the cash tender.  This value is present only if the value of `type` is `CASH`.</value>
            </member>
        <member name="M:Square.Connect.Model.Tender.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Tender.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Tender.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Tender.Equals(Square.Connect.Model.Tender)">
             <summary>
             Returns true if Tender instances are equal
             </summary>
             <param name="other">Instance of Tender to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Tender.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.TenderCardDetails">
             <summary>
             Represents additional details of a tender with `type` `CARD` or `SQUARE_GIFT_CARD`
             </summary>
            </member>
        <member name="T:Square.Connect.Model.TenderCardDetails.StatusEnum">
             <summary>
             The credit card payment's current state (such as `AUTHORIZED` or `CAPTURED`). See [TenderCardDetailsStatus](#type-tendercarddetailsstatus) for possible values.
             </summary>
             <value>The credit card payment's current state (such as `AUTHORIZED` or `CAPTURED`). See [TenderCardDetailsStatus](#type-tendercarddetailsstatus) for possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.StatusEnum.AUTHORIZED">
             <summary>
             Enum AUTHORIZED for "AUTHORIZED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.StatusEnum.CAPTURED">
             <summary>
             Enum CAPTURED for "CAPTURED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.StatusEnum.VOIDED">
             <summary>
             Enum VOIDED for "VOIDED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.StatusEnum.FAILED">
             <summary>
             Enum FAILED for "FAILED"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.TenderCardDetails.EntryMethodEnum">
             <summary>
             The method used to enter the card's details for the transaction.
             </summary>
             <value>The method used to enter the card's details for the transaction.</value>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.EntryMethodEnum.SWIPED">
             <summary>
             Enum SWIPED for "SWIPED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.EntryMethodEnum.KEYED">
             <summary>
             Enum KEYED for "KEYED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.EntryMethodEnum.EMV">
             <summary>
             Enum EMV for "EMV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.EntryMethodEnum.ONFILE">
             <summary>
             Enum ONFILE for "ON_FILE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.EntryMethodEnum.CONTACTLESS">
             <summary>
             Enum CONTACTLESS for "CONTACTLESS"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.TenderCardDetails.Status">
             <summary>
             The credit card payment's current state (such as `AUTHORIZED` or `CAPTURED`). See [TenderCardDetailsStatus](#type-tendercarddetailsstatus) for possible values.
             </summary>
             <value>The credit card payment's current state (such as `AUTHORIZED` or `CAPTURED`). See [TenderCardDetailsStatus](#type-tendercarddetailsstatus) for possible values.</value>
            </member>
        <member name="P:Square.Connect.Model.TenderCardDetails.EntryMethod">
             <summary>
             The method used to enter the card's details for the transaction.
             </summary>
             <value>The method used to enter the card's details for the transaction.</value>
            </member>
        <member name="M:Square.Connect.Model.TenderCardDetails.#ctor(System.Nullable{Square.Connect.Model.TenderCardDetails.StatusEnum},Square.Connect.Model.Card,System.Nullable{Square.Connect.Model.TenderCardDetails.EntryMethodEnum})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.TenderCardDetails" /> class.
             </summary>
             <param name="Status">The credit card payment's current state (such as `AUTHORIZED` or `CAPTURED`). See [TenderCardDetailsStatus](#type-tendercarddetailsstatus) for possible values..</param>
             <param name="Card">The credit card's non-confidential details..</param>
             <param name="EntryMethod">The method used to enter the card's details for the transaction..</param>
            </member>
        <member name="P:Square.Connect.Model.TenderCardDetails.Card">
             <summary>
             The credit card's non-confidential details.
             </summary>
             <value>The credit card's non-confidential details.</value>
            </member>
        <member name="M:Square.Connect.Model.TenderCardDetails.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.TenderCardDetails.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.TenderCardDetails.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.TenderCardDetails.Equals(Square.Connect.Model.TenderCardDetails)">
             <summary>
             Returns true if TenderCardDetails instances are equal
             </summary>
             <param name="other">Instance of TenderCardDetails to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.TenderCardDetails.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.TenderCardDetailsEntryMethod">
             <summary>
             Indicates the method used to enter the card's details.
             </summary>
             <value>Indicates the method used to enter the card's details.</value>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsEntryMethod.SWIPED">
             <summary>
             Enum SWIPED for "SWIPED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsEntryMethod.KEYED">
             <summary>
             Enum KEYED for "KEYED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsEntryMethod.EMV">
             <summary>
             Enum EMV for "EMV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsEntryMethod.ONFILE">
             <summary>
             Enum ONFILE for "ON_FILE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsEntryMethod.CONTACTLESS">
             <summary>
             Enum CONTACTLESS for "CONTACTLESS"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.TenderCardDetailsStatus">
             <summary>
             Indicates the card transaction's current status.
             </summary>
             <value>Indicates the card transaction's current status.</value>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsStatus.AUTHORIZED">
             <summary>
             Enum AUTHORIZED for "AUTHORIZED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsStatus.CAPTURED">
             <summary>
             Enum CAPTURED for "CAPTURED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsStatus.VOIDED">
             <summary>
             Enum VOIDED for "VOIDED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsStatus.FAILED">
             <summary>
             Enum FAILED for "FAILED"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.TenderCashDetails">
             <summary>
             Represents the details of a tender with `type` `CASH`.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.TenderCashDetails.#ctor(Square.Connect.Model.Money,Square.Connect.Model.Money)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.TenderCashDetails" /> class.
             </summary>
             <param name="BuyerTenderedMoney">The total amount of cash provided by the buyer, before change is given..</param>
             <param name="ChangeBackMoney">The amount of change returned to the buyer..</param>
            </member>
        <member name="P:Square.Connect.Model.TenderCashDetails.BuyerTenderedMoney">
             <summary>
             The total amount of cash provided by the buyer, before change is given.
             </summary>
             <value>The total amount of cash provided by the buyer, before change is given.</value>
            </member>
        <member name="P:Square.Connect.Model.TenderCashDetails.ChangeBackMoney">
             <summary>
             The amount of change returned to the buyer.
             </summary>
             <value>The amount of change returned to the buyer.</value>
            </member>
        <member name="M:Square.Connect.Model.TenderCashDetails.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.TenderCashDetails.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.TenderCashDetails.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.TenderCashDetails.Equals(Square.Connect.Model.TenderCashDetails)">
             <summary>
             Returns true if TenderCashDetails instances are equal
             </summary>
             <param name="other">Instance of TenderCashDetails to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.TenderCashDetails.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.TenderType">
             <summary>
             Indicates a tender's type.
             </summary>
             <value>Indicates a tender's type.</value>
            </member>
        <member name="F:Square.Connect.Model.TenderType.CARD">
             <summary>
             Enum CARD for "CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderType.CASH">
             <summary>
             Enum CASH for "CASH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderType.THIRDPARTYCARD">
             <summary>
             Enum THIRDPARTYCARD for "THIRD_PARTY_CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderType.SQUAREGIFTCARD">
             <summary>
             Enum SQUAREGIFTCARD for "SQUARE_GIFT_CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderType.NOSALE">
             <summary>
             Enum NOSALE for "NO_SALE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderType.OTHER">
             <summary>
             Enum OTHER for "OTHER"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Transaction">
             <summary>
             Represents a transaction processed with Square, either with the Connect API or with Square Register.  The `tenders` field of this object lists all methods of payment used to pay in the transaction.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Transaction.ProductEnum">
             <summary>
             The Square product that processed the transaction.
             </summary>
             <value>The Square product that processed the transaction.</value>
            </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.REGISTER">
             <summary>
             Enum REGISTER for "REGISTER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.EXTERNALAPI">
             <summary>
             Enum EXTERNALAPI for "EXTERNAL_API"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.BILLING">
             <summary>
             Enum BILLING for "BILLING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.APPOINTMENTS">
             <summary>
             Enum APPOINTMENTS for "APPOINTMENTS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.INVOICES">
             <summary>
             Enum INVOICES for "INVOICES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.ONLINESTORE">
             <summary>
             Enum ONLINESTORE for "ONLINE_STORE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.PAYROLL">
             <summary>
             Enum PAYROLL for "PAYROLL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.OTHER">
             <summary>
             Enum OTHER for "OTHER"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.Transaction.Product">
             <summary>
             The Square product that processed the transaction.
             </summary>
             <value>The Square product that processed the transaction.</value>
            </member>
        <member name="M:Square.Connect.Model.Transaction.#ctor(System.String,System.String,System.String,System.Collections.Generic.List{Square.Connect.Model.Tender},System.Collections.Generic.List{Square.Connect.Model.Refund},System.String,System.Nullable{Square.Connect.Model.Transaction.ProductEnum},System.String,Square.Connect.Model.Order,Square.Connect.Model.Address)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Transaction" /> class.
             </summary>
             <param name="Id">The transaction's unique ID, issued by Square payments servers..</param>
             <param name="LocationId">The ID of the transaction's associated location..</param>
             <param name="CreatedAt">The time when the transaction was created, in RFC 3339 format..</param>
             <param name="Tenders">The tenders used to pay in the transaction..</param>
             <param name="Refunds">Refunds that have been applied to any tender in the transaction..</param>
             <param name="ReferenceId">If the transaction was created with the [Charge](#endpoint-charge) endpoint, this value is the same as the value provided for the `reference_id` parameter in the request to that endpoint. Otherwise, it is not set..</param>
             <param name="Product">The Square product that processed the transaction..</param>
             <param name="ClientId">If the transaction was created in the Square Register app, this value is the ID generated for the transaction by Square Register.  This ID has no relationship to the transaction's canonical `id`, which is generated by Square's backend servers. This value is generated for bookkeeping purposes, in case the transaction cannot immediately be completed (for example, if the transaction is processed in offline mode).  It is not currently possible with the Connect API to perform a transaction lookup by this value..</param>
             <param name="Order">The order associated with this transaction, if any..</param>
             <param name="ShippingAddress">The shipping address provided in the request, if any..</param>
            </member>
        <member name="P:Square.Connect.Model.Transaction.Id">
             <summary>
             The transaction's unique ID, issued by Square payments servers.
             </summary>
             <value>The transaction's unique ID, issued by Square payments servers.</value>
            </member>
        <member name="P:Square.Connect.Model.Transaction.LocationId">
             <summary>
             The ID of the transaction's associated location.
             </summary>
             <value>The ID of the transaction's associated location.</value>
            </member>
        <member name="P:Square.Connect.Model.Transaction.CreatedAt">
             <summary>
             The time when the transaction was created, in RFC 3339 format.
             </summary>
             <value>The time when the transaction was created, in RFC 3339 format.</value>
            </member>
        <member name="P:Square.Connect.Model.Transaction.Tenders">
             <summary>
             The tenders used to pay in the transaction.
             </summary>
             <value>The tenders used to pay in the transaction.</value>
            </member>
        <member name="P:Square.Connect.Model.Transaction.Refunds">
             <summary>
             Refunds that have been applied to any tender in the transaction.
             </summary>
             <value>Refunds that have been applied to any tender in the transaction.</value>
            </member>
        <member name="P:Square.Connect.Model.Transaction.ReferenceId">
             <summary>
             If the transaction was created with the [Charge](#endpoint-charge) endpoint, this value is the same as the value provided for the `reference_id` parameter in the request to that endpoint. Otherwise, it is not set.
             </summary>
             <value>If the transaction was created with the [Charge](#endpoint-charge) endpoint, this value is the same as the value provided for the `reference_id` parameter in the request to that endpoint. Otherwise, it is not set.</value>
            </member>
        <member name="P:Square.Connect.Model.Transaction.ClientId">
             <summary>
             If the transaction was created in the Square Register app, this value is the ID generated for the transaction by Square Register.  This ID has no relationship to the transaction's canonical `id`, which is generated by Square's backend servers. This value is generated for bookkeeping purposes, in case the transaction cannot immediately be completed (for example, if the transaction is processed in offline mode).  It is not currently possible with the Connect API to perform a transaction lookup by this value.
             </summary>
             <value>If the transaction was created in the Square Register app, this value is the ID generated for the transaction by Square Register.  This ID has no relationship to the transaction's canonical `id`, which is generated by Square's backend servers. This value is generated for bookkeeping purposes, in case the transaction cannot immediately be completed (for example, if the transaction is processed in offline mode).  It is not currently possible with the Connect API to perform a transaction lookup by this value.</value>
            </member>
        <member name="P:Square.Connect.Model.Transaction.Order">
             <summary>
             The order associated with this transaction, if any.
             </summary>
             <value>The order associated with this transaction, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.Transaction.ShippingAddress">
             <summary>
             The shipping address provided in the request, if any.
             </summary>
             <value>The shipping address provided in the request, if any.</value>
            </member>
        <member name="M:Square.Connect.Model.Transaction.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Transaction.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Transaction.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Transaction.Equals(Square.Connect.Model.Transaction)">
             <summary>
             Returns true if Transaction instances are equal
             </summary>
             <param name="other">Instance of Transaction to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Transaction.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.TransactionProduct">
             <summary>
             Indicates the Square product used to process a transaction.
             </summary>
             <value>Indicates the Square product used to process a transaction.</value>
            </member>
        <member name="F:Square.Connect.Model.TransactionProduct.REGISTER">
             <summary>
             Enum REGISTER for "REGISTER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TransactionProduct.EXTERNALAPI">
             <summary>
             Enum EXTERNALAPI for "EXTERNAL_API"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TransactionProduct.BILLING">
             <summary>
             Enum BILLING for "BILLING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TransactionProduct.APPOINTMENTS">
             <summary>
             Enum APPOINTMENTS for "APPOINTMENTS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TransactionProduct.INVOICES">
             <summary>
             Enum INVOICES for "INVOICES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TransactionProduct.ONLINESTORE">
             <summary>
             Enum ONLINESTORE for "ONLINE_STORE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TransactionProduct.PAYROLL">
             <summary>
             Enum PAYROLL for "PAYROLL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TransactionProduct.OTHER">
             <summary>
             Enum OTHER for "OTHER"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.UpdateCustomerRequest">
             <summary>
             Defines the body parameters that can be provided in a request to the [UpdateCustomer](#endpoint-updatecustomer) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerRequest.#ctor(System.String,System.String,System.String,System.String,System.String,Square.Connect.Model.Address,System.String,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateCustomerRequest" /> class.
             </summary>
             <param name="GivenName">The customer's given (i.e., first) name..</param>
             <param name="FamilyName">The customer's family (i.e., last) name..</param>
             <param name="CompanyName">The name of the customer's company..</param>
             <param name="Nickname">A nickname for the customer..</param>
             <param name="EmailAddress">The customer's email address..</param>
             <param name="Address">The customer's physical address..</param>
             <param name="PhoneNumber">The customer's phone number..</param>
             <param name="ReferenceId">An optional second ID you can set to associate the customer with an entity in another system..</param>
             <param name="Note">An optional note to associate with the customer..</param>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.GivenName">
             <summary>
             The customer's given (i.e., first) name.
             </summary>
             <value>The customer's given (i.e., first) name.</value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.FamilyName">
             <summary>
             The customer's family (i.e., last) name.
             </summary>
             <value>The customer's family (i.e., last) name.</value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.CompanyName">
             <summary>
             The name of the customer's company.
             </summary>
             <value>The name of the customer's company.</value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.Nickname">
             <summary>
             A nickname for the customer.
             </summary>
             <value>A nickname for the customer.</value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.EmailAddress">
             <summary>
             The customer's email address.
             </summary>
             <value>The customer's email address.</value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.Address">
             <summary>
             The customer's physical address.
             </summary>
             <value>The customer's physical address.</value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.PhoneNumber">
             <summary>
             The customer's phone number.
             </summary>
             <value>The customer's phone number.</value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.ReferenceId">
             <summary>
             An optional second ID you can set to associate the customer with an entity in another system.
             </summary>
             <value>An optional second ID you can set to associate the customer with an entity in another system.</value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.Note">
             <summary>
             An optional note to associate with the customer.
             </summary>
             <value>An optional note to associate with the customer.</value>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerRequest.Equals(Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             Returns true if UpdateCustomerRequest instances are equal
             </summary>
             <param name="other">Instance of UpdateCustomerRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.UpdateCustomerResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [UpdateCustomer](#endpoint-updatecustomer) endpoint.  One of `errors` or `customer` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Customer)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateCustomerResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Customer">The updated customer..</param>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerResponse.Customer">
             <summary>
             The updated customer.
             </summary>
             <value>The updated customer.</value>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerResponse.Equals(Square.Connect.Model.UpdateCustomerResponse)">
             <summary>
             Returns true if UpdateCustomerResponse instances are equal
             </summary>
             <param name="other">Instance of UpdateCustomerResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.VoidTransactionRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.VoidTransactionRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionRequest.Equals(Square.Connect.Model.VoidTransactionRequest)">
             <summary>
             Returns true if VoidTransactionRequest instances are equal
             </summary>
             <param name="other">Instance of VoidTransactionRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.VoidTransactionResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [CaptureTransaction](#endpoint-capturetransaction) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.VoidTransactionResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
            </member>
        <member name="P:Square.Connect.Model.VoidTransactionResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionResponse.Equals(Square.Connect.Model.VoidTransactionResponse)">
             <summary>
             Returns true if VoidTransactionResponse instances are equal
             </summary>
             <param name="other">Instance of VoidTransactionResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
    </members>
</doc>
